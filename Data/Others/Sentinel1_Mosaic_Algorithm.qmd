---
aliases: 
  - /Data/Sentinel1_Mosaic_Algorithm.html
format:
  html:
    code-fold: true
execute:
  echo: false
  output: asis
jupyter: python3

---

##### Algorithm

**Input data and preprocessing**

Sentinel-1 GRD data, as offered and pre-processed in Sentinel Hub, serves as input for the generation of mosaics. The preprocessing steps made in Sentinel Hub are explained in detail in the [Sentinel Hub documentation](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Data/S1GRD.html#processing-chain){target="_blank"}. Here, we are only listing the main processing steps applied to the input data before mosaicking: 

**(1)** Calibration to beta0 backscatter coefficient

**(2)** Thermal noise removal

**(3)** Radiometric terrain correction using area integration

**(4)** Terrain Correction using Range-Doppler terrain correction

For steps 3 and 4, the Copernicus DEM was used with a spatial resolution of 10m over Europe and 30m for the rest of the world.

**Generation of mosaics**

Two different mosaics are being produced for each month: **IW mosaic** and **DH mosaic**

<table class="available-mosaic-bands" style="margin: 10px;">
  <thead>
    <tr>
      <th style="background-color: #9ea1a5"></th>
      <th style="background-color: #9ea1a5">IW mosaic</th>
      <th style="background-color: #9ea1a5">DH mosaic</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td rowspan="1">Polarization</td>
      <td>VV + VH</td>
      <td>HH + HV</td>
    </tr>
    <tr>
      <td rowspan="1">Acquisition mode</td>
      <td>IW acquisition mode</td>
      <td>All acquisition modes</td>
    </tr>
    <tr>
      <td rowspan="1">Orbit direction</td>
      <td colspan="2" style="text-align: center">both</td>
    </tr>
    <tr>
      <td rowspan="1">Processing grid</td>
      <td colspan="2" style="text-align: center">UTM grid with 100,08 x 100,08 km tiles ([link](https://s3.eu-central-1.amazonaws.com/sh-batch-grids/tiling-grid-2.zip){target="_blank"})</td>
    </tr>
    <tr>
      <td rowspan="1">Spatial resolution</td>
      <td>20 m</td>
      <td>40 m</td>
    </tr>
    <tr>
      <td rowspan="1">Output format</td>
      <td colspan="2" style="text-align: center">16-bit cloud optimized GeoTIFF</td>
    </tr>
  </tbody>
</table>

The weighted sum of the flattened backscatter observations was used for mosaicking data in a monthly stack. Observations with the highest available local resolution receive the highest local weights. Therefore, the differences in backscatter between areas sloping towards the sensor and away from the sensor in individual orbits are largely corrected, and the resulting signal is mainly a product of the local surface properties.Observations in radar shadows are filtered out and are not used. The algorithm is described in detail in the paper by D. Small 'SAR backscatter multitemporal compositing via local resolution weighting' ([pdf](https://www.zora.uzh.ch/id/eprint/68085/1/2012_SmallD-AV_20120722-IGARSS12-LocalResolutionWeighting_Kopie_.pdf){target="_blank"} is available). The resulting mosaics have less noise and better spatial homogeneity when compared to each single Sentinel-1 GRD observation.

<a class="btn btn-light" data-bs-toggle="collapse" href="#AccessBYOC" role="button" aria-expanded="false" aria-controls="AccessBYOC">Access Sentinel-1 Level 3 Monthly Mosaics with Sentinel Hub</a>

::: {#AccessBYOC .collapse .multi-collapse}

##### Access Sentinel-1 Level 3 Monthly Mosaics with Sentinel Hub

Sentinel-1 Level 3 Monthly Mosaics are onboarded to Sentinel Hub as a BYOC data collection. To access the data, you will need the specific pieces of information listed below, for general information about how to access BYOC collections visit our [Data BYOC page](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Data/Byoc.html){target="_blank"}.

**IW Mosaics**

- Data collection id: byoc-3c662330-108b-4378-8899-525fd5a225cb
- Available Bands and Data:

<table class="available-mosaic-bands" style="margin: 10px;">
  <thead>
    <tr>
      <th style="background-color: #9ea1a5">Name</th>
      <th style="background-color: #9ea1a5">Description</th>
      <th style="background-color: #9ea1a5">Resolution</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td rowspan="1">VV</td>
      <td>VV polarization</td>
      <td>20 m</td>
    </tr>
    <tr>
      <td rowspan="1">VH</td>
      <td>VH polarization</td>
      <td>20 m</td>
    </tr>
    <tr>
      <td rowspan="1">dataMask</td>
      <td>The mask of data/no data pixels ([more](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/UserGuides/Datamask.html))</td>
      <td>N/A*</td>
    </tr>    
  </tbody>
</table>

*dataMask has no source resolution as it is calculated for each output pixel.

###### Example of requesting mosaic over Sfântu Gheorghe with Processing API request

The request below is written in Python. To execute it, you need to create an OAuth client as is explained [here](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Overview/Authentication.html#python). It is named `oauth` in this example.

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VV", "VH", "dataMask"],
    output: { bands: 3 }
  };
}

var viz = new HighlightCompressVisualizer(0, 0.8);
var gain = 0.8;


function evaluatePixel(sample) {
  if (sample.dataMask == 0) {
    return [0, 0, 0];
  }
  
  let vals = [gain * sample.VV / 0.28,
              gain * sample.VH / 0.06,
              gain * sample.VH / sample.VV / 0.49];
  
  return viz.processList(vals);
}
"""

request = {
  "input": {
    "bounds": {
      "bbox": [
          25.713501,
          45.74836,
          26.196213,
          45.965231
      ]
    },
    "data": [
      {
        "dataFilter": {
          "timeRange": {
            "from": "2023-09-01T00:00:00Z",
            "to": "2023-09-02T23:59:59Z"
          }
        },
        "type": "byoc-3c662330-108b-4378-8899-525fd5a225cb"
      }
    ]
  },
  "output": {
    "width": 512,
    "height": 330,
    "responses": [
      {
        "identifier": "default",
        "format": {
          "type": "image/jpeg"
        }
      }
    ]
  },
  "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

**DH Mosaics**

- Data collection id: byoc-cc676fec-cb8d-4bc1-adce-1d9658da950b
- Available Bands and Data:

<table class="available-mosaic-bands" style="margin: 10px;">
  <thead>
    <tr>
      <th style="background-color: #9ea1a5">Name</th>
      <th style="background-color: #9ea1a5">Description</th>
      <th style="background-color: #9ea1a5">Resolution</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td rowspan="1">HH</td>
      <td>HH polarization</td>
      <td>40 m</td>
    </tr>
    <tr>
      <td rowspan="1">HV</td>
      <td>HV polarization</td>
      <td>40 m</td>
    </tr>
    <tr>
      <td rowspan="1">dataMask</td>
      <td>The mask of data/no data pixels ([more](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/UserGuides/Datamask.html))</td>
      <td>N/A*</td>
    </tr>    
  </tbody>
</table>

*dataMask has no source resolution as it is calculated for each output pixel.

###### Example of requesting mosaic over Reykjavík with Processing API request

The request below is written in Python. To execute it, you need to create an OAuth client as is explained [here](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Overview/Authentication.html#python). It is named `oauth` in this example.

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["HH", "HV", "dataMask"],
    output: { bands: 4 }
  };
}

var viz = new HighlightCompressVisualizer(0, 0.8);
var gain = 0.8;


function evaluatePixel(sample) {
  let vals = [gain * sample.HH / 0.28,
              gain * sample.HV / 0.06,
              gain * sample.HV / sample.HH / 0.49];
  
  let out = viz.processList(vals);
  out.push(sample.dataMask);
  return out;
}
"""

request = {
  "input": {
    "bounds": {
      "bbox": [
          -22.486267,
          63.959085,
          -19.79187,
          64.722572
      ]
    },
    "data": [
      {
        "dataFilter": {
          "timeRange": {
            "from": "2023-01-01T00:00:00Z",
            "to": "2023-01-02T23:59:59Z"
          }
        },
        "type": "byoc-cc676fec-cb8d-4bc1-adce-1d9658da950b"
      }
    ]
  },
  "output": {
    "width": 858,
    "height": 553,
    "responses": [
      {
        "identifier": "default",
        "format": {
          "type": "image/jpeg"
        }
      }
    ]
  },
  "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```
:::
