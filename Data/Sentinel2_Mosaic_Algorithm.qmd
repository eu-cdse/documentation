---
format:
  html:
    code-fold: true
execute:
  echo: false
  output: asis
jupyter: python3

---

##### Algorithm

The following algorithm was run independently for each pixel:

**(1)** For each pixel: Take the three-month stack of Sentinel-2 L2A observations. Only bands `B02`, `B03`, `B04`, `B08` and `SCL` are used to create the mosaic. For bands `B02`-`B08` transform the values to reflectance.

**(2)** For each observation: Mark an observation as `invalid` if the value of the Sentinel-2 L2A scene classification band (`SCL`) has one of the following values: 

-	`1`-SATURATED_DEFECTIVE,
-	`3`-CLOUD_SHADOW, 
-	`7`-CLOUD_LOW_PROBA / UNCLASSIFIED, 
-	`8`-CLOUD_MEDIUM_PROBA, 
-	`9`-CLOUD_HIGH_PROBA, 
-	`10`-THIN_CIRRUS

**(3)** For each pixel: Discard all invalid observations, what remains is called valid observations. The number of valid observations is generally different for each pixel and is output as a positive integer in the `observations` output band. 

**(4)** For each pixel, for each band (`B02`, `B03`, `B04`, `B08`): Sort all valid observations for each band separately. 

**(5)** For each pixel, for each band (`B02`, `B03`, `B04`, `B08`): Take the value of the first quartile and multiply it by `10000` (to get a 'digital number'). This is an output value.

**(6)** For each pixel, for each band (`B02`, `B03`, `B04`, `B08`): If there are no valid observations, output the value `-32768`, which represents no data. For the `observations` band, output the value `0`, which also represents no data. 

::: {.callout-note}


-	If multiple Sentinel-2 observations from the same day are available, only the most recent observation on that day is used.
-	No pre-filtering (e.g. based on cloud coverage) was performed to preserve as many non-cloudy pixels as possible.


:::

<a class="btn btn-light" data-bs-toggle="collapse" href="#AccessBYOC" role="button" aria-expanded="false" aria-controls="AccessBYOC">Access Sentinel-2 Level 3 Quarterly Mosaics with Sentinel Hub</a>

::: {#AccessBYOC .collapse .multi-collapse}

##### Access Sentinel-2 Level 3 Quarterly Mosaics with Sentinel Hub 

Sentinel-2 Level 3 Quarterly Mosaics are onboarded to Sentinel Hub as a BYOC data collection. To access the data, you will need the specific pieces of information listed below, for general information about how to access BYOC collections visit our [Data BYOC page](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Data/Byoc.html){target="_blank"}.

- Data collection id: `byoc-5460de54-082e-473a-b6ea-d5cbe3c17cca`
- Available Bands and Data: 

<table class="available-mosaic-bands" style="margin: 10px;">
  <thead>
    <tr>
      <th style="background-color: #9ea1a5">Name</th>
      <th style="background-color: #9ea1a5">Description</th>
      <th style="background-color: #9ea1a5">Resolution</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td rowspan="1">B02</td>
      <td>Blue</td>
      <td>10 m</td>
    </tr>
    <tr>
      <td rowspan="1">B03</td>
      <td>Green</td>
      <td>10 m</td>
    </tr>
    <tr>
      <td rowspan="1">B04</td>
      <td>Red</td>
      <td>10 m</td>
    </tr>
    <tr>
      <td rowspan="1">B08</td>
      <td>Near Infrared (NIR)</td>
      <td>10 m</td>
    </tr>
    <tr>
      <td rowspan="1">observation</td>
      <td>Number of valid observations</td>
      <td>10 m</td>
    </tr>
    <tr>
      <td rowspan="1">dataMask</td>
      <td>The mask of data/no data pixels ([more](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/UserGuides/Datamask.html){target="_blank"}).</td>
      <td>N/A*</td>
    </tr>
  </tbody>
</table>

*dataMask has no source resolution as it is calculated for each output pixel.

###### Example of requesting mosaic over Rome with Processing API request

The request below is written in python. To execute it, you need to create an OAuth client as is explained [here](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Overview/Authentication.html#python){target="_blank"}. It is named `oauth` in this example.

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["B02", "B03", "B04"],
    output: { bands: 3 }
  };
}

function evaluatePixel(sample) {
  return [2.5 * sample.B04/10000, 2.5 * sample.B03/10000, 2.5 * sample.B02/10000];
}
"""

request = {
  "input": {
    "bounds": {
      "bbox": [
        12.44693,
        41.870072,
        12.541001,
        41.917096
      ]
    },
    "data": [
      {
        "dataFilter": {
          "timeRange": {
            "from": "2023-01-01T00:00:00Z",
            "to": "2023-01-02T23:59:59Z"
          }
        },
        "type": "byoc-5460de54-082e-473a-b6ea-d5cbe3c17cca"
      }
    ]
  },
  "output": {
    "width": 780,
    "height": 523,
    "responses": [
      {
        "identifier": "default",
        "format": {
          "type": "image/jpeg"
        }
      }
    ]
  },
  "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```
:::