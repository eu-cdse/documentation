{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Sentinel-1\"\n",
        "aliases: \n",
        "  - /Data/Sentinel1.html\n",
        "  - /Data/Sentinel1.qmd\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "execute:\n",
        "  echo: false\n",
        "  output: asis\n",
        "jupyter: python3\n",
        "image: https://ai4edatasetspublicassets.blob.core.windows.net/assets/pc_thumbnails/sentinel-1-grd.png\n",
        "---"
      ],
      "id": "b1cade15"
    },
    {
      "cell_type": "code",
      "metadata": {
        "tags": [
          "parameters"
        ]
      },
      "source": [
        "constellation = \"Sentinel-1\""
      ],
      "id": "bd512177",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The [Sentinel-1 radar imaging mission](https://sentinels.copernicus.eu/web/sentinel/missions/sentinel-1){target=\"_blank\"} is composed of a constellation of two polar-orbiting satellites providing continuous all-weather, day and night imagery for Land and Maritime Monitoring. C-band synthetic aperture radar imaging has the advantage of operating at wavelengths that are not obstructed by clouds or lack of illumination and therefore can acquire data during day or night under all weather conditions.\n",
        "\n",
        "**The end of mission of the Sentinel-1B satellite has been declared in July 2022**\n",
        "<br>On 23 December 2021, Copernicus Sentinel-1B experienced an anomaly related to the instrument electronics power supply provided by the satellite platform, leaving it unable to deliver radar data. Despite all investigations and recovery attempts, ESA and the European Commission had to announce that it is the end of the mission for Sentinel-1B. Copernicus Sentinel-1A remains fully operational. More information about the end of the mission for the Sentinel-1B satellite can be found on the webpage [Mission ends for Copernicus Sentinel-1B satellite](https://www.esa.int/Applications/Observing_the_Earth/Copernicus/Sentinel-1/Mission_ends_for_Copernicus_Sentinel-1B_satellite){target=\"_blank\"}.\n",
        "<br>In response to the loss of Sentinel-1B, **the mission observation scenario of Sentinel-1A was adjusted**, affecting the nominal global coverage frequency. An up-to-date overview of the observation scenario in place can be consulted on the webpage [Sentinel-1 Observation Scenario](https://sentinel.esa.int/web/sentinel/missions/sentinel-1/observation-scenario){target=\"_blank\"}. Some regions are currently not observed by Sentinel-1. Nevertheless, the regions that are still observed, now have a repeat cycle of 12 days under a one-satellite constellation scenario, which affects possible interferometric analyses.\n",
        "\n",
        "\n",
        "Sentinel data products are made available systematically and free of charge to all data users including the general public, scientific and commercial users. These [data products](https://sentinels.copernicus.eu/web/sentinel/missions/sentinel-1/data-products){target=\"_blank\"} are available in single polarisation for Wave mode and dual polarisation or single polarisation for SM, IW and EW modes.\n"
      ],
      "id": "98bd90c4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import json\n",
        "from IPython.display import display, Markdown, Latex,HTML\n",
        "from tabulate import tabulate\n",
        "\n",
        "import sys\n",
        "sys.path.append('..')\n",
        "from Datafunctions import data_availability, filter_levels"
      ],
      "id": "6ab8980e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#load the json metadata file\n",
        "\n",
        "meta = None\n",
        "with open(\"../collections.json\") as f:\n",
        "    meta = json.load(f)[\"collections\"]\n",
        "\n",
        "meta = [ c for c in meta if constellation in c[\"constellation\"] ]"
      ],
      "id": "ba81acfe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# function to fetch thumbnail url\n",
        "\n",
        "def get_thumbnail():\n",
        "    thumb_url = c.get(\"assets\", {}).get(\"thumbnail\",{}).get(\"href\", \"\")\n",
        "    return thumb_url"
      ],
      "id": "0bfe3577",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#function to fetch the stac url for the dataset\n",
        "def get_stac():\n",
        "    try:\n",
        "        stac_extension = c[\"stac_extensions\"]\n",
        "        link = None  # initialize link variable to None\n",
        "\n",
        "        for item in stac_extension:\n",
        "            if item.startswith('http'):\n",
        "                stac_url = f\"\"\"STAC: <a href=\"{item}\" target=\"_blank\">{item}</a>\"\"\"\n",
        "                break  # exit the loop once you've found the link        \n",
        "    except Exception:\n",
        "        stac_url = \"\"\n",
        "    return stac_url"
      ],
      "id": "dd6d0688",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# function to search for finding links within the metadata based on specific keyword\n",
        "\n",
        "def find_link(rel=None,href_contains=None, title_contains=None):\n",
        "    results = [ l[\"href\"] for l in c.get(\"links\",[]) if (rel is None or l[\"rel\"]==rel) and (href_contains==None or href_contains in l[\"href\"]) and (title_contains==None or title_contains in l[\"title\"]) ]\n",
        "    if len(results) == 0:\n",
        "        return None\n",
        "    else:\n",
        "        return results[0]"
      ],
      "id": "761062af",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#get link for wmts\n",
        "def get_wmts():\n",
        "    url = \"\"\n",
        "    try:\n",
        "        wmts = find_link(rel=\"wmts\",title_contains=\"Web Map Tile Service\")\n",
        "        if wmts is not None:\n",
        "            url = f\"\"\"WMTS:  <a href=\"{wmts}\" target=\"_blank\">{wmts}</a>\"\"\" \n",
        "    except Exception:\n",
        "        url = \"\"\n",
        "    return url"
      ],
      "id": "b13137db",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#get link for source\n",
        "def get_source():\n",
        "    url = \"\"\n",
        "    try:\n",
        "        source = find_link(rel=\"source\")\n",
        "        if source is not None:\n",
        "            url = f\"\"\"Source:  <a href=\"{source}\" target=\"_blank\">{source}</a>\"\"\" \n",
        "    except Exception:\n",
        "        url = \"\"\n",
        "    return url"
      ],
      "id": "d89877cc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#get link for more information of the collection\n",
        "def get_moreinfo():\n",
        "    url = \"\"\n",
        "    try:\n",
        "        info = find_link(rel=\"MoreInformation\")\n",
        "        if info is not None:\n",
        "            url = f\"\"\"More Information:  <a href=\"{info}\" target=\"_blank\">{info}</a>\"\"\" \n",
        "    except:\n",
        "        url = \"\"\n",
        "    return url"
      ],
      "id": "d3d3dbc6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#function to combine all the fetched links under the detailed block\n",
        "\n",
        "def necessary_links():\n",
        "\n",
        "    # list of all links\n",
        "    links = [get_stac(), get_wmts(), get_source(), get_moreinfo()]\n",
        "\n",
        "    # join non-empty links using HTML list tags\n",
        "    non_empty_links = [link for link in links if link]\n",
        "    if non_empty_links:\n",
        "        link_items = [f\"<li>{link}</li>\" for link in non_empty_links]\n",
        "        link_block = f\"\"\"<h5>Useful Links</h5><ul>{\"\".join(link_items)}</ul>\"\"\"\n",
        "    else:\n",
        "        link_block = \"\"\n",
        "\n",
        "    return link_block"
      ],
      "id": "fdf843e4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# function enclosing thumbnail block \n",
        "\n",
        "def thumbblock(src,userguide, opensearch, odata, gsd,revisit_time, datatype, frequency):\n",
        "\n",
        "    if src or userguide or opensearch or odata or gsd or revisit_time or datatype or frequency:\n",
        "        if src:\n",
        "            thumb =  f\"\"\"<div class=\"row\" style=\"display: flex; justify-content: space-around\"><div class=\"column\"><div class=\"badge-row\">{userguide}{opensearch}{odata}</div><div class=\"badge-row gutter\">{gsd}{revisit_time}{frequency}</div><div class=\"badge-row\">{datatype}</div></div><div class=\"column\" style=\"margin-right:10%; margin-left:auto; text-align: right;\"><figure><img width=\"165\" height=\"150\" src={src}><figcaption align=\"center\">{databrowser}</figcaption></figure></div></div>\"\"\"\n",
        "        else:\n",
        "            thumb =  f\"\"\"<div class=\"row\" style=\"display: flex; justify-content: space-around\"><div class=\"column\"><div class=\"badge-row\">{userguide}{opensearch}{odata}</div><div class=\"badge-row gutter\">{gsd}{revisit_time}{frequency}</div><div class=\"badge-row\">{datatype}</div></div><div class=\"column\" style=\"margin-right:10%; margin-left:auto; text-align: right;\"></div></div>\"\"\"\n",
        "        return thumb\n",
        "    else:\n",
        "        return ''"
      ],
      "id": "ff951f82",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# get extension detail\n",
        "def get_extent():\n",
        "    try:\n",
        "        extent = c[\"extent\"]\n",
        "        spatial = extent['spatial']['bbox']\n",
        "        spatial = f'<h5>Spatial Extent</h5> {spatial}'\n",
        "    except Exception:\n",
        "        spatial = \"\"\n",
        "    try:\n",
        "        temporal = extent['temporal']['interval']\n",
        "        temporal = f'<h5>Temporal Interval</h5> {temporal}'\n",
        "    except Exception:\n",
        "        temporal = \"\"\n",
        "    return spatial,temporal"
      ],
      "id": "4c672495",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def get_bandtable():\n",
        "    tabletitle = \"Spectral Bands\"\n",
        "    try:\n",
        "        band_num = len(c['summaries']['eo:bands'])\n",
        "        t = []\n",
        "        headers = [\"Band Name\", \"Common Name\", \"GSD(m)\", \"Center Wavelength(μm)\"]\n",
        "        empty_columns = [True] * len(headers)  # Track empty columns\n",
        "        \n",
        "        for i in range(band_num):\n",
        "            band_data = c['summaries']['eo:bands'][i]\n",
        "            band = band_data.get(\"name\", \"\")    \n",
        "            c_name = band_data.get(\"common_name\", \"\")  \n",
        "            b_gsd = band_data.get(\"gsd\", \"\")\n",
        "            b_wavelength = band_data.get(\"center_wavelength\", \"\")               \n",
        "            row = [band, c_name, b_gsd, b_wavelength]\n",
        "            t.append(row)\n",
        "            \n",
        "            # Check for empty columns\n",
        "            for j, value in enumerate(row):\n",
        "                if value:\n",
        "                    empty_columns[j] = False\n",
        "        \n",
        "        # Remove empty columns from headers and table rows\n",
        "        headers = [header for i, header in enumerate(headers) if not empty_columns[i]]\n",
        "        t = [[row[i] for i, value in enumerate(row) if not empty_columns[i]] for row in t]\n",
        "        \n",
        "        # Check if all columns are empty\n",
        "        if len(headers) == 0:\n",
        "            table = \"\"\n",
        "        else:\n",
        "            table = tabulate(t, headers=headers, tablefmt='html', floatfmt=\".4f\", stralign=\"center\", numalign=\"center\")\n",
        "            # Set the minimum width of each column to 100 pixels\n",
        "            table = table.replace(\"<table>\", '<table class=\"table\">')\n",
        "            table = f\"\"\"<h5>{tabletitle}</h5>{table}\"\"\"\n",
        "    except:\n",
        "        table = \"\"\n",
        "    \n",
        "    return table\n"
      ],
      "id": "c1542125",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#function encloding detail block (block under **Further details about the collection**)\n",
        "\n",
        "def detailblock(ID,license_button,cite):\n",
        "    #get temporal and spatial extent\n",
        "    spatial, temporal = get_extent()\n",
        "    \n",
        "    # include spectral band table\n",
        "    table = get_bandtable()\n",
        "\n",
        "    # get necessary links\n",
        "    link_block = necessary_links()\n",
        "\n",
        "    #combine all the details to be shown within the detailed block\n",
        "    if any(val for val in (table, link_block) if not val.isspace() and val != \"\"):\n",
        "        bandinfo = f\"\"\"<button onclick=\"toggleContent('{ID}')\" class=\"expand-collapse\">Further details about the data collection</button><div class=\"expand-content\" id=\"{ID}\" style=\"display:none;\"><div class=\"row\" style=\"display: flex; justify-content: space-around\"><div class=\"column\">{license_button}&nbsp;&nbsp;{cite}</div></div><div class=\"row\" style=\"display: flex; justify-content: space-around\"><div class=\"column\">{spatial}</div><div class=\"column\">{temporal}</div></div><div>{table}</div><div>{link_block}</div></div>\"\"\"\n",
        "    else:\n",
        "        bandinfo = \"\"\n",
        "    return bandinfo"
      ],
      "id": "453b3281",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Display the baseline details of the collections\n",
        "def baselineinfo(filename): \n",
        "    # Read the content of the Markdown file\n",
        "    with open(filename, 'r') as file:\n",
        "        sentinel2_baseline = file.read()\n",
        "    info = sentinel2_baseline\n",
        "    return info"
      ],
      "id": "aecb59b9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# function to toggle detail block\n",
        "\n",
        "def togglescript():\n",
        "    script = f\"\"\"<script>function toggleContent(id){{var x = document.getElementById(id);if (x.style.display === \"none\"){{x.style.display = \"block\";}} else {{x.style.display = \"none\";}}}}</script>\"\"\"\n",
        "    return script"
      ],
      "id": "6a656216",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# for loop to display the content\n",
        "text = ''\n",
        "categories=[]\n",
        "\n",
        "for c in meta:\n",
        "\n",
        "    additional_info = \"\"\n",
        "    title = c[\"title\"]\n",
        "    resolution = c.get(\"gsd\", \"\")\n",
        "    revisit = c.get(\"revisit\", \"\")\n",
        "    datatype = c.get(\"type\", \"\")   \n",
        "    collectionID = c.get(\"id\", \"\")       \n",
        "\n",
        "    try:\n",
        "        for i in c[\"data_product\"]:\n",
        "            levelID = c[\"data_product\"][i][\"Level_ID\"]\n",
        "            about_product = c[\"data_product\"][i][\"description\"]\n",
        "            levelids.append((levelID,about_product))\n",
        "    except Exception:\n",
        "        levelID = \"\"\n",
        "        about_product = \"\"\n",
        "\n",
        "    license_type = c.get(\"license\", \"\")\n",
        "    sci_cite = c.get(\"sci:citation\", \"\")\n",
        "    frequency = c.get('summaries',{}).get('Frequency',\"\")\n",
        "    category = c.get(\"Category\", \"\")\n",
        "    if category != \"\":\n",
        "        categories.append(category)\n",
        "    else:\n",
        "        pass\n",
        "\n",
        "    if collectionID == \"SENTINEL2_L2A\":\n",
        "        additional_info = baselineinfo(\"../Others/Sentinel2_L2A_baseline.qmd\")\n",
        "    if collectionID == \"SENTINEL2_L1C\":\n",
        "        additional_info = baselineinfo(\"../Others/Sentinel2_L1C_baseline.qmd\")\n",
        "    if collectionID == \"SENTINEL2_L3\":\n",
        "        additional_info = baselineinfo(\"../Others/Sentinel2_Mosaic_Algorithm.qmd\")\n",
        "    if collectionID == \"SENTINEL1_L3\":\n",
        "        additional_info = baselineinfo(\"../Others/Sentinel1_Mosaic_Algorithm.qmd\")\n",
        "    else:\n",
        "        pass\n",
        "\n",
        "\n",
        "    # include offer table\n",
        "    offer = data_availability.main(c)\n",
        "    \n",
        "    links = { l[\"rel\"] + l.get(\"title\",\"\"):l[\"href\"] for l in c.get(\"links\",[])}\n",
        "    userguide = find_link(rel=\"about\",title_contains=\"User\")\n",
        "    opensearch = find_link(rel=\"opensearch\")\n",
        "    odata = find_link(rel=\"odata\")\n",
        "    databrowser = find_link(rel=\"browser\",title_contains=\"Data-Browser\")\n",
        "    license_url = find_link(rel=\"license\")\n",
        "    cite = find_link(rel=\"cite-as\")\n",
        "    \n",
        "    # create a button for userguide\n",
        "\n",
        "    if userguide is not None:\n",
        "        userguide = f\"\"\"[![User guide](https://img.shields.io/badge/-User_guide-77cc09)]({userguide}){{target='_blank'}}\"\"\"\n",
        "    else:\n",
        "        userguide = \"\"\n",
        "\n",
        "    # create a button for cite\n",
        "    if cite is not None:\n",
        "        cite = f\"\"\"[![\"Cite\"](https://img.shields.io/badge/-Cite-77cc09)]({cite}){{target='_blank'}}\"\"\"\n",
        "    else:\n",
        "        cite = \"\"\n",
        "\n",
        "    # create a button for license \n",
        "    if sci_cite is not None:\n",
        "        if license_url is not None and  license_url != \"\":\n",
        "            license_button = f\"\"\"<a href=\"{license_url}\" target=\"_blank\">{sci_cite}</a>\"\"\"\n",
        "        else:\n",
        "            license_button = f\"\"\"{sci_cite}\"\"\"\n",
        "    else:\n",
        "        license_button = \"\"\n",
        "\n",
        "    # create a button to the browser \n",
        "    if databrowser is not None:\n",
        "        databrowser = f\"\"\"<a class=\"clickable\" href=\"{databrowser}\" target=\"_blank\">View in browser</a>\"\"\"\n",
        "    else:\n",
        "        databrowser = \"\"\n",
        "\n",
        "    # create a button showing the resolution of the collection\n",
        "    if resolution is not None and  resolution != \"\":\n",
        "        gsd = f\"\"\"<img src=\"https://img.shields.io/badge/resolution-{resolution}m-0A4393\" />\"\"\"\n",
        "    else:\n",
        "        gsd = \"\"\n",
        "\n",
        "    # create a button showing the revisit time of the collection\n",
        "    if revisit is not None and  revisit != \"\":\n",
        "        revisit_time = f\"\"\"<img src=\"https://img.shields.io/badge/revisit-{revisit}--day-0A4393\"/>\"\"\"\n",
        "    else:\n",
        "        revisit_time = \"\"\n",
        "\n",
        "    # create a button showing the frquency of the product\n",
        "    if frequency is not None and  frequency != \"\":\n",
        "        Updated_freq = f\"\"\"<img src=\"https://img.shields.io/badge/Update_Frequency-{frequency}-0A4393\"/>\"\"\"\n",
        "    else:\n",
        "        Updated_freq = \"\"\n",
        "\n",
        "    # create a button specifying if it is Analysis ready data or unprojected\n",
        "    if \"ARD\" in datatype:\n",
        "        datatype = f\"\"\"![](https://img.shields.io/badge/{datatype}-77cc09) \"\"\"\n",
        "    elif \"Unprojected\" in datatype:\n",
        "        datatype = f\"\"\"![](https://img.shields.io/badge/{datatype}-important) \"\"\"\n",
        "    else:\n",
        "        datatype = \"\"\n",
        "\n",
        "    # create a button to api url\n",
        "    if opensearch is not None:\n",
        "        opensearch = f\"\"\"[![Catalog API:OpenSearch](https://img.shields.io/badge/-Catalog_API:OpenSearch-77cc09?style=flat)\n",
        "]({opensearch}){{target='_blank'}}\"\"\"\n",
        "    else:\n",
        "        opensearch = \"\"\n",
        "    \n",
        "    if odata is not None:\n",
        "        odata = f\"\"\"[![Catalog API:OData](https://img.shields.io/badge/-Catalog_API:OData-77cc09?style=flat)\n",
        "]({odata}){{target='_blank'}}\"\"\"\n",
        "    else:\n",
        "        odata = \"\"\n",
        "\n",
        "    text = text + f\"\"\"\n",
        "\n",
        "<div class=\"{category}\" style=\"display: block;\">\n",
        "\n",
        "<div>\n",
        "\n",
        "## {title}\n",
        "\n",
        "{thumbblock(get_thumbnail(),userguide,opensearch,odata,gsd,revisit_time,datatype,Updated_freq)}\n",
        "\n",
        "#### Overview\n",
        "\n",
        "{c[\"description\"]}\n",
        "\n",
        "{offer}\n",
        "\n",
        "{detailblock(collectionID,license_button,cite)}\n",
        "\n",
        "{additional_info}\n",
        "\n",
        "</div>\n",
        "\n",
        "</div>\n",
        "\n",
        "\"\"\""
      ],
      "id": "b301e972",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "text = filter_levels.createcheckboxes(sorted(set(categories))) +text + togglescript()\n",
        "\n",
        "display(Markdown(text))"
      ],
      "id": "166d6aff",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Derived products & Processing options\n",
        "\n",
        "Sentinel-1 data can be accessed and processed in different ways within the Copernicus Data Space Ecosystem. Below we have compiled an overview of all the options to help you decide which one to use.\n",
        "\n",
        "## [Sentinel-1 RTC](https://documentation.dataspace.copernicus.eu/Data/Additional.html#sentinel-1-rtc) \n",
        "[Sentinel-1 RTC](https://documentation.dataspace.copernicus.eu/Data/Additional.html#sentinel-1-rtc) (Radiometric Terrain Correction) SAR Backscatter is a product processed from Sentinel-1 GRD data and compliant with [CEOS Analysis Ready Data for Land (CARD4L) specifications](https://ceos-dev.ceos.org/ard/){target=\"_blank\"} for Normalised Radar Backscatter (NRB) products. Orthorectification is based on Copernicus DEM and no speckle filtering is applied. ([Additional product information](https://sentinels.copernicus.eu/web/sentinel/sentinel-1-ard-normalised-radar-backscatter-nrb-product){target=\"_blank\"})\n",
        "\n",
        "## [Sentinel Hub processing options](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Data/S1GRD.html#processing-options) \n",
        "\n",
        "Sentinel Hub offers the following processing options in the [Sentinel-1 GRD processing chain](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Data/S1GRD.html#processing-chain):\n",
        "\n",
        "- [Backscatter coefficients](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Data/S1GRD.html#processing-options):\n",
        "\n",
        "    - **beta0 (ellipsoid)**\n",
        "    - **sigma0 (ellipsoid)**\n",
        "    - **gamma0 (ellipsoid)**\n",
        "    - **gamma0 (terrain)** &rarr; this gamma0 RTC option can only be performed if *orthorectification* is enabled\n",
        "\n",
        "- [Lee Speckle Filtering](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Data/S1GRD.html#processing-options) applied on source data after calibration and noise removal\n",
        "- [Radiometric Terrain Correction (RTC)](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Data/S1GRD.html#processing-options) can be enabled by setting the backscatter coefficient to *gamma0 (terrain)* and enabling *orthorectification*\n",
        "- [Orthorectification](https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Data/S1GRD.html#processing-options) with Range-Doppler terrain correction using one of the following DEMs:\n",
        "\n",
        "    - **Copernicus 10m/30m DEM** (10m resolution inside [39 European states](https://spacedata.copernicus.eu/collections/copernicus-digital-elevation-model){target=\"_blank\"} including islands and 30m elsewhere.)\n",
        "    - **Copernicus 30m DEM**\n",
        "    - **Copernicus 90m DEM**\n",
        "\n",
        "## openEO processing options \n",
        "\n",
        "When working with the SENTINEL1_GRD data collection through openEO, SAR backscatter computation is automatically applied. Unfortunately, the default backscatter coefficient \"gamma0-terrain\" is not yet supported in the openEO backend implementation of Copernicus Data Space Ecosystem, typically resulting in an error like \"Backscatter coefficient 'gamma0-terrain' is not supported.\"\n",
        "\n",
        "As a workaround, it is currently recommended to explicitly specify the [`sar_backscatter()`](https://processes.openeo.org/draft/#sar_backscatter){target=\"_blank\"} process with the supported coefficient \"sigma0-ellipsoid\".\n",
        "\n",
        "- **sigma0-ellipsoid**: ground area computed with ellipsoid earth model\n",
        "\n",
        "For example:\n",
        "\n",
        "```python\n",
        "\n",
        "sentinel1 = connection.load_collection(\n",
        "    \"SENTINEL1_GRD\",\n",
        "    temporal_extent = [\"2022-06-04\", \"2022-08-04\"],\n",
        "    bands = [\"VV\",\"VH\"]\n",
        ")\n",
        "\n",
        "  sentinel1 = sentinel1.sar_backscatter(\n",
        "      coefficient='sigma0-ellipsoid')\n",
        "```\n",
        "\n",
        "The product is orthorectified using the Copernicus 30m DEM. No RTC or speckle filtering is applied to this product.\n",
        "\n",
        "\n",
        "## [On-demand processing options](https://documentation.dataspace.copernicus.eu/APIs/On-Demand%20Production%20API.html) \n",
        "\n",
        "Processing of CARD-BS and COH6/COH12 products can be requested [on demand](https://documentation.dataspace.copernicus.eu/APIs/On-Demand%20Production%20API.html): \n",
        "\n",
        "- [Sentinel-1 (CARD-BS) BackScatter](https://documentation.dataspace.copernicus.eu/APIs/On-Demand%20Production%20API.html)\n",
        "\n",
        "    - This processing option contains gamma0 geometric terrain correction (orthorectification) using Copernicus 30m DEM (identical to the *gamma0 (ellipsoid)* backscatter coefficient with enabled *orthorectification* option in Sentinel Hub processing options.) No RTC or speckle filtering is applied to this product.\n",
        "    - [Additional information](https://creodias.eu/eodata/sentinel-1/sentinel-1-l2-backscatter-bs/){target=\"_blank\"}\n",
        "\n",
        "- [Sentinel-1 (CARD-COH) Coherence](https://documentation.dataspace.copernicus.eu/APIs/On-Demand%20Production%20API.html)\n",
        "\n",
        "    - The Sentinel-1 CARD COH (Copernicus Analysis Ready Data Coherence) processor generates a Sentinel-1 Level 2 product describing the coherence of a pair of images - 12 days apart. The product is orthorectified using Copernicus 30m DEM but no RTC or speckle filtering is applied.\n",
        "    - [Additional information](https://creodias.eu/eodata/sentinel-1/sentinel-1-l3-bs-monthly-com/){target=\"_blank\"}."
      ],
      "id": "01fb69d6"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\LEVENTK\\AppData\\Local\\anaconda3\\envs\\env_for_gh_doc\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}