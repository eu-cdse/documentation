```{python}
# import necessary packages
import json
from IPython.display import display, Markdown, Latex,HTML
from tabulate import tabulate
```

```{python}
#load the collection

meta = None
with open("./collections.json") as f:
    meta = json.load(f)["collections"]

meta = [ c for c in meta if mission in c["mission"] ]

```

```{python}
# fetch thumbnail 
dummy_thumb = "https://www.esa.int/var/esa/storage/images/esa_multimedia/images/2015/06/northwest_italy_and_southern_france/15492215-1-eng-GB/Northwest_Italy_and_southern_France_pillars.jpg"

def get_thumbnail(c):
    try:
        thumb_url = c["assets"]["thumbnail"]["href"]
    except:
        thumb_url = ""
    return thumb_url

```

```{python}
# thumbnail block 

def thumbblock(src,userguide, opensearch, gsd,revisit_time, datatype):
    if src:
        thumb =  f"""<div class="row" style="display: flex; justify-content: space-around"><div class="column"><div class="badge-row">{userguide} {opensearch}</div><div class="badge-row gutter">{gsd}{revisit_time}</div><div class="badge-row">{datatype}</div></div><div class="column" style="margin-right:10%; margin-left:auto; text-align: right;"><figure><img width="165" height="150" src={src}><figcaption align="center">{databrowser}</figcaption></figure></div></div>"""
    else:
        thumb =  f"""<div class="row" style="display: flex; justify-content: space-around"><div class="column"><div class="badge-row">{userguide}{opensearch}</div><div class="badge-row gutter">{gsd}{revisit_time}</div><div class="badge-row">{datatype}</div></div><div class="column" style="margin-right:10%; margin-left:auto; text-align: right;"></div></div>"""
    return thumb

```

```{python}
def necessary_links(c):
    stac = get_stac(c)
    wmts = get_wmts()
    if stac:
        link_block =f"""<h5>Useful Links</h5><li>{stac}</li><li>{wmts}</li>"""
    else:
        link_block = ""
    return link_block
```

```{python}
def get_stac(c):
    try:
        stac_extension = c["stac_extensions"]
        link = None  # initialize link variable to None

        for item in stac_extension:
            if item.startswith('http'):
                stac_url = f"""STAC: <a href="{item}" target="_blank">{item}</a>"""
                break  # exit the loop once you've found the link        
    except:
        stac_url = ""
    return stac_url
```
```{python}
def get_wmts():
    url = ""
    try:
        wmts = find_link(rel="wmts",title_contains="Web Map Tile Service")
        if wmts is not None:
            url = f"""WMTS:  <a href="{wmts}" target="_blank">{wmts}</a>""" 
    except:
        url = ""
    return url
```

```{python}
# function to toggle detail block

def togglescript():
    script = f"""<script>function toggleContent(id){{var x = document.getElementById(id);if (x.style.display === "none"){{x.style.display = "block";}} else {{x.style.display = "none";}}}}</script>"""
    return script

```

```{python}
# include detail block

def detailblock(ID,xy,time,table,link_block):
    
    if any(val for val in (xy, time, table, link_block) if not val.isspace() and val != ""):
        bandinfo = f"""<button onclick="toggleContent('{ID}')" class="expand-collapse">Further details about the data collection</button><div class="expand-content" id="{ID}" style="display:none;"><div class="row" style="display: flex; justify-content: space-around"><div class="column">{xy}</div><div class="column">{time}</div></div><div>{table}</div><div>{link_block}</div></div>"""
    else:
        bandinfo = ""
    return bandinfo

```

```{python}
# function to search for links

def find_link(rel=None,href_contains=None, title_contains=None):
    results = [ l["href"] for l in c.get("links",[]) if (rel is None or l["rel"]==rel) and (href_contains==None or href_contains in l["href"]) and (title_contains==None or title_contains in l["title"]) ]
    if len(results) == 0:
        return None
    else:
        return results[0]

```

```{python}
# get extension detail
def get_extent(c):
    try:
        extent = c["extent"]
        spatial = extent['spatial']['bbox']
        spatial = f'<h5>Spatial Extent</h5> {spatial}'
    except:
        spatial = ""
    try:
        temporal = extent['temporal']['interval']
        temporal = f'<h5>Temporal Interval</h5> {temporal}'
    except:
        temporal = ""
    return spatial,temporal
```

```{python}
def get_bandtable(c):
    tabletitle = "Spectral Bands"
    try: 
        band_num = len(c['summaries']['eo:bands'])
        t = []
        for i in range(0,band_num):
            try:
                band = c['summaries']['eo:bands'][i]['name'] 
            except:
                band = ""
            try:
                c_name = c['summaries']['eo:bands'][i]['common_name']
            except:
                c_name = ''
            try:
                b_gsd = c['summaries']['eo:bands'][i]['gsd']
            except:
                b_gsd = ''
            try:
                b_wavelength = c['summaries']['eo:bands'][i]['center_wavelength']
            except:
                b_wavelength = ''
            t.append([band,c_name,b_gsd,b_wavelength])
        table = tabulate(t,headers=["Band Name", "Common Name", "GSD(m)", "Center Wavelength(Î¼m)"], tablefmt='html', floatfmt=".4f",stralign="center",numalign="center")
        # Set the minimum width of each column to 100 pixels
        table = table.replace("<table>", '<table class="table">')
        table = f"""<h5>{tabletitle}</h5>{table}"""
    except:
        table = " "
    return table
```

```{python}
def get_availablity(c):
    tabletitle = "Offered Data"
    try: 
        data_offer = len(c['summaries']['DataAvailability'])
        t = []
        note = ""
        for i in range(0,data_offer):
            try:
                Status = c['summaries']['DataAvailability'][i]['Archive_status']
            except:
                Status = 'no data'
            try:
                Access = c['summaries']['DataAvailability'][i]['Access_type']
            except:
                Access = 'no data'
            try:
                Spatial = c['summaries']['DataAvailability'][i]['Spatial']
            except:
                Spatial = 'no data'
            try:
                Temporal = c['summaries']['DataAvailability'][i]['Temporal']
            except:
                Temporal = 'no data'
            try:
                From = c['summaries']['DataAvailability'][i]['Availabilty']
            except:
                From = 'no data'
            try:
                footnotes = c['summaries']['DataAvailability'][i]['Note']
            except:
                footnotes = ''
            try:
                offered_type = c['summaries']['DataAvailability'][i]['offered_type']
            except:
                offered_type = ''
            if offered_type != '':
                t.append([offered_type,Status,Access,Spatial,Temporal,From])
                note += footnotes
            else:
                t.append([Status,Access,Spatial,Temporal,From])
                note += footnotes
                
        table = tabulate(t,headers=["Archive Status","Access Type","Spatial Extent","Temporal Extent","Available in Ecosystem from"], tablefmt='html', floatfmt=".4f",stralign="center",numalign="center")
        # Set the minimum width of each column to 100 pixels
        table = table.replace("<table>", '<table class="table">')
        table = f"""<h5>{tabletitle}</h5>{table}{note}"""
    except:
        table = " "
    return table
```

```{python}
# for loop to display the content
text = ''

for c in meta:

    title = c["title"]
    try:
        resolution = c["gsd"] 
    except:
        resolution = ""
    try:
        revisit = c["revisit"] 
    except:
        revisit = ""
    try:
        datatype = c["type"] 
    except:
        datatype = ""
        
    try:
        collectionID = c["id"]
    except:
        collectionID = ""

    try:
        for i in c["data_product"]:
            LevelID = c["data_product"][i]["Level_ID"]
            About = c["data_product"][i]["description"]
            levelids.append((LevelID,About))
    except:
        LevelID = ""
        About = ""

    # insert thumbnail
    thumb_url = get_thumbnail(c)

    # get necessary links
    link_block = necessary_links(c)

    # get extents
    spatial , temporal = get_extent(c)

    # include spectral band table
    table = get_bandtable(c)

    # include offer table
    offer = get_availablity(c)
    
    links = { l["rel"] + l.get("title",""):l["href"] for l in c.get("links",[])}
    userguide = find_link(rel="about",title_contains="User")
    opensearch = find_link(rel="opensearch")
    databrowser = find_link(rel="browser",title_contains="Data-Browser")

    if userguide is not None:
        userguide = f"""[![User guide](https://img.shields.io/badge/-User_guide-77cc09)]({userguide}){{target='_blank'}}"""
    else:
        userguide = ""


    if databrowser is not None:
        databrowser = f"""<a class="clickable" href="{databrowser}" target="_blank">View in browser</a>"""
    else:
        databrowser = ""

    if resolution is not None and  resolution != "":
        gsd = f"""<img src="https://img.shields.io/badge/resolution-{resolution}m-0A4393" />"""
    else:
        gsd = ""

    if revisit is not None and  revisit != "":
        revisit_time = f"""<img src="https://img.shields.io/badge/revisit-{revisit}--daily-0A4393"/>"""
    else:
        revisit_time = ""

    if "ARD" in datatype:
        datatype = f"""![](https://img.shields.io/badge/{datatype}-77cc09) """
    elif "Unprojected" in datatype:
        datatype = f"""![](https://img.shields.io/badge/{datatype}-important) """
    else:
        datatype = ""

    if opensearch is not None:
        opensearch = f"""[![Catalog API](https://img.shields.io/badge/-Catalog_API-77cc09?style=flat)
]({opensearch}){{target='_blank'}}"""
    else:
        opensearch = ""

    text = text + f"""

## {title}

{thumbblock(thumb_url,userguide,opensearch,gsd,revisit_time,datatype)}

#### Overview

{c["description"]}

{offer}

{detailblock(collectionID,spatial,temporal,table,link_block)}


"""

```

```{python}
text = text + togglescript()

display(Markdown(text))

```