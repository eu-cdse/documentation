---
title: "Publish a Service"
aliases: 
  - "/Applications/Plaza/PublishService.html"
  - "/Applications/PlazaDetails/ServiceProviderGuide.html"
---
The openEO Algorithm Plaza also provides a self-service onboarding wizard that enables users to publish their services effortlessly. It assigns a [service maturity](ServiceMaturity.qmd) label to each onboarded service.

Users can publish their algorithm as a service in the openEO Algorithm Plaza. These algorithms are expected to address Earth Observation solutions and implement them using openEO. When set as public, the service is then available to all users in the same way as any other service in the Algorithm Plaza. 

![](../_images/PlazaManageService.png)

As you select "Services" from the sub-menu options under the "Dashboard" section of the portal, you'll be directed to the screen described above. If you haven't published any services yet, you'll see an option to "REGISTER YOUR FIRST SERVICE." However, if you have already published services, you'll see a list of the services that you or your organization have published.


> If you are a member of multiple organisations and wish to publish an algorithm from a specific organisation, ensure you are logged in to that particular organisation. You can verify this by navigating to the [profile page](ManageOrg.qmd) and, if necessary, [switch](ManageOrg.qmd#switch-between-organisation) your 'Linked Organization'.

![](../_images/services_list.png)

On already created services, you can see an avatar (at this stage, just a colour and initials from the service name), the service name and a service status indication.
As a user, you can click on the avatar or the service's name to load its detail page. 
In addition, you can click on the Register service CTA button to load the add service page to create a new service.

Furthermore, together with the service cards you have created, you can see a card area with a `REGISTER NEW SERVICE` CTA button. This button will load the add service page to create a new service.

## Develop an openEO algorithm

A good integration in openEO algorithm plaza begins as you start programming your algorithm.

In openEO, a 'datacube' view is used, which hides a lot of the complexity when working with huge EO data archives.
It provides full archive access to the most popular datasets. You will have to get familiar with the Application Programming Interface (API), which provides a lot of predefined processes.
To integrate existing code, you will have to use the concept of 'User Defined Functions' ([UDFs](https://open-eo.github.io/openeo-python-client/udf.html){target="_blank"}). Furthermore, Parallelization and scalability are taken care of.

#### Working with openEO

To get familiar in working we openEO we recommend to start with a basic introduction on using openEO can be found [here](https://documentation.dataspace.copernicus.eu/APIs/openEO/openEO.html){target="_blank"}. Furthermore, to deploy your openEO algorithm as a service, you can use the ['user defined process'](https://open-eo.github.io/openeo-python-client/udp.html){target="_blank"} functionality.

## Register and publish your service

Once your algorithm is ready, you can register and publish your service. 
The following sections will guide you through the publishing process.

As you click the **Register your first service** button.
You will now be presented with a wizard to enter the necessary information regarding your service.

##### Step 1: Register your service

The first step requires you to select the type of service that you want to publish.
Currently, only those services integrated with the openEO as an orchestrator are supported.

![](../_images/select_service.png)

##### Step 2: Input general information

The following table outlines the fields required as basic information for your service in this step:

| Field | Required | Description |
| --- | --- | --- |
| Service name | Yes | Your service's title that will be displayed in the openEO algorithm plaza. |
| Summary | No | Short description of your service. The summary will be visible in the openEO algorithm plaza overview.|
| Description | No | In your service description, begin with an algorithm overview, followed by a brief methodology. It is helpful to list required parameters and include examples and output images for user guidance.|
| Avatar | No | URL to an image that can be used an avatar of your service. The avatar will be visible in the openEO algorithm plaza overview. |

##### Step 3: Additional Sections

In addition to the basic information mentioned above, you can provide more details on your service by adding additional sections. The following sections are available:

* Parameters: You can list all the parameters that should be fed to the service to execute it. You can specify the name, type, description, and default value for each parameter.
* Usage example(Python code): You can provide a Python code example to demonstrate how to use your service. The code should give a complete example of how to use your service, including the use of the parameters and the namespace. 
* Results: You can briefly describe your service's results and mention the output format of the result.
* Cost Estimation: You can give a user an idea of the resource consumption and time required to run your service for a given input.
* References: You can provide a list of references to publications, websites, or other resources relevant to your service. Provide details on resource consumption, processing time, and output format to help users effectively understand and utilize your service.

##### Step 4: Add labels

You can add multiple labels to your service to help users find your service in the openEO algorithm plaza. The labels can be used to filter services within the marketplace and also give an idea of its category.

##### Step 5: Select service visibility

You can choose to make your service public or private. If you select public, your service will be visible to all users in the openEO algorithm plaza. If you select private, only you and your organization members will be able to see your service.

Click on `REGISTER SERVICE` to finish the basic registration.
Finishing the basic registration allows you to provide more details on the service by either clicking the `NEXT` button or `REMOVE` to delete the service or even `BACK TO SERVICE` to exit the editing of the service.

##### Step 6: Add Media Files and Links

In the **Media Files and Links** section you can upload image that will be shown when a user views your service on the catalogue.
You can add images by dragging and dropping files into the designated area or click the plus icon.
Next to images, you can also specify the different multiple URLs that will be shown in the detailed information of the service.

##### Step 7: Add openEO Settings

In the **openEO Settings** section openEO namespace and service ID of your service should be filed in.
Entering this information will enable the `Access Service` button, allowing visitors of openEO algorithm plaza to execute your service through the [openEO Web Editor](https://openeo.dataspace.copernicus.eu/){target="_blank"}.
The required information is represented in the following table:

| Field | Required | Description |
| --- | --- | --- |
| Namespace | Yes | Namespace of openEO service. When the service was created through a [User Defined Process (UDP)](https://open-eo.github.io/openeo-python-client/cookbook/udp_sharing.html){target="_blank"}, the namespace is formatted as `u:<publisher username/id>`. This information can be extracted from the public URL when creating and sharing the UDP through openEO. |
| Service name | Yes | Name of the service as shared within openEO. For a [User Defined Process (UDP)](https://open-eo.github.io/openeo-python-client/cookbook/udp_sharing.html){target="_blank"}, the service name corresponds with the ID of the service. |


Congratulations! You have successfully published your service in the openEO algorithm plaza. You can now view your service in the openEO algorithm plaza and share it with others. Furthermore, we recommend you go through the [Manage a Service](ManageService.qmd) documentation to manage the service.