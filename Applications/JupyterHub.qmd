---
title: "JupyterLab"
image: _images/jupyter_login.png
---

JupyterLab is an advanced interactive development environment (IDE) that offers a flexible and feature-rich interface for working with notebooks, code, and data. It allows users to organize their workspaces using a flexible layout system. Furthermore, it supports various document formats, including notebooks, text files, code files, and markdown files. With its modular and extensible architecture, JupyterLab enables customization through extensions, additional functionalities, and integration with external tools. 
JupyterLab's flexible design lets you personalize it by adding extra tools and connecting it with other software. This makes it easier to navigate files, give commands, fix errors, and interact with your data.

Therefore, for all users of the Copernicus Data Space ecosystem, this service is offered free of charge as a user-friendly platform for accessing and analyzing Earth observation data. JupyterLab makes working with Copernicus data easier and more effective for both beginners and experienced users by supporting various document formats and offering a rich set of features.

## Notebooks

Within JupyterLab, python notebooks can be used as an interactive programming environment for non-programmers and developers who want to prototype their EO data processing quickly. They provide a user-friendly interface that integrates well with services like Sentinel Hub and openEO. Each notebook has direct access to the EO Data repository; example notebooks are available to facilitate data interaction. 

You can access this service by clicking on this link.: [https://jupyterhub.dataspace.copernicus.eu/](https://jupyterhub.dataspace.copernicus.eu/){target="_blank"}

![](_images/JupyterLab_welcome.png)

Upon clicking the "ACCESS JUPYTERLAB" button, you'll be directed to the login window. Please use your Copernicus Data Space Ecosystem credentials to log in.


## Notebook flavors

Once logged in to JupyterLab, users are offered a choice of 3 flavors of Jupyter instances: Small, Medium and Large.
The size of the instance is based on how many resources, like CPU cores and memory, are allocated to the notebook kernels.
All flavours are suitable for performing simple tasks and can run all samples provided in the samples folder. For fair resource usage, it is suggested to start with the "Small" flavour and switch to a larger one if you encounter kernel crashes caused by insufficient memory.

![](_images/Flavors_captcha.png)

## JupyterLab User Interface

After signing in, you'll see a launcher with Python environments like Python 3, Geo Science, OpenEO, and Sentinel Hub. Each environment is equippedÂ with specific Python packages tailored to various requirements. You can run your code in a notebook or a console, depending on your preference. Additionally, it provides options to create text files, markdown files, or Python files, allowing you to work with different types of documents as needed.

![](_images/FirstLook_jupyter.png)

1. Main Work Area:
    The main work area in JupyterLab is the central portion of the interface where users perform their tasks. It consists of tabs representing open documents like notebooks, code files, and markdown files. These tabs can be arranged and docked within the work area, allowing users to customize their workspace to suit their needs and preferences.

2. Sidebar:
    The sidebar on the left side of the interface provides additional functionality and information. It houses various panels, including a file browser for easy navigation through files and folders, a list of running kernels and terminals, and a table of contents for quick access to different sections of a notebook or document.

3. Launcher:
    The launcher is a central component that enables users to create new documents and launch different activities. It also provides access to other useful tools like terminals for executing commands, new file creation, and a help panel for accessing documentation and assistance.

4. Menu Bar:
    The menu bar, located at the top of the interface, provides a set of menus with various options. Users can perform file operations, edit documents, configure appearances, and use other advanced tools.

5. Contextual Tabs:
    Contextual tabs are dynamic and appear at the top of each notebook. These tabs provide relevant options and settings specific to the selected item, allowing users to perform actions and configurations directly within the interface.

::: {.callout-tip collapse="true"} 

Users can drag files from the file browser and drop them into notebooks or code files to import them seamlessly. Additionally, cells within a notebook can be rearranged by simply dragging and dropping them to different positions, allowing content structuring.

:::

These components collectively form the JupyterLab user interface, providing users with a flexible and customizable workspace for working with notebooks, code, and data. 

## Creating and Managing Notebooks

By default, sample notebooks are provided in the folder samples. 

To create a notebook in JupyterLab, you can easily select your desired kernel from the Notebook section in the launcher. Simply click on the kernel you want, and a new notebook named "Untitled. ipynb" will be created. If you wish to rename the notebook, you can do so by right-clicking on the notebook name in the sidebar and selecting the "rename" option. 

## Installing additional packages

You can install additional Python packages if necessary. This can be done both from the Notebook Terminal, which is located in the Launcher tab or within a Notebook cell. For e.g.:

::: {.panel-tabset}

# Terminal

`pip install required_package`

# Notebook

`!pip install required_package`

:::


## Markdown

If you prefer working in a separate file, you can create a new Markdown (.md) or text (.txt) from the launcher. Or right-click on the sidebar and select "New file". Once the file is ready, you can start writing your markdown content. After you finish writing, save the file. To preview it, simply double-click on it in the file browser, which will open a preview pane showing the rendered Markdown.

Alternatively, you can include rich text in the cell using Markdown syntax within Notebooks. 
In a notebook, you can create a new cell and change its type to "Markdown" using the cell type dropdown in the toolbar or by pressing  `M`. 
Here, you can write your content in the cell using the Markdown syntax. Then execute the cell by pressing `Shift` + `Enter` .



<!-- ## Copernicus Dataspace Dataset

Each Notebook has a direct access to the EO Data repository. -->


## Collaboration and Sharing

JupyterLab allows collaborative work with the functionality to share it with multiple users. They can edit and view the same notebooks or projects in real-time. It also offers various sharing options, including exporting notebooks to different formats (HTML, PDF, Markdown) and publishing them on platforms like GitHub or JupyterHub. These features empower users to easily share their work, communicate findings, and collaborate with a broader audience, promoting efficient collaboration and seamless knowledge dissemination.

## Basic notebook commands

Working with a Notebook is pretty convenient and the supporting text should enable a quick understanding of the presented code. Some basic Notebook commands are listed below:

| Keyboard Shortcut | Command                          |
|-------------------|----------------------------------|
| Ctrl + Enter      | Run cell                         |
| A                 | Insert cell above current cell    |
| B                 | Insert cell below current cell    |
| C                 | Copy cell code                   |
| V                 | Paste cell code                  |
| DD                | Delete selected cell             |
| M                 | Change cell to Markdown (text) mode |


## Storage

When you start the notebook, in the file navigation pane (the sidebar - #2) you will see two folders:

* `mystorage`
* `samples`

> The availability of all other folders will be limited to your current session only. See the next chapter on more information on session persistence.

### `mystorage`

This is a persistent storage with 10GB of space, which is automatically created for each user during the first login to JupyterLab.
The storage is hosted in the CloudFerro cloud and can be used to save notebooks between the sessions, store the results or uploaded data files.
This storage area is preserved when you logout and the Jupyter kernel is shut down due to inactivity.
It will be kept for up to 15 days from your last login, and you will receive a notification to log in to JupyterLab to reset the timer and keep the data preserved.
If you do not log in, then after 15 days your files will be deleted from CloudFerro cloud storage.

::: {.callout-important title="Lost all folder?" collapse="true"}

If the `mystorage` folder was lost due to inactivity for several weeks, you can request restoration from our support team, though it's not guaranteed. If the folder disappeared while still active in the past few days, try restarting the server by going to File -> Hub Control Panel -> Stop My Server, then Start My Server. If the issue persists, reach out to our support team for possible solution.

:::

### `samples`

These folders are recreated with every start of the Jupyter kernel.
The `samples` folder is always up-to-date with the latest version of notebooks.
If you make changes to the samples please make sure to save the updated notebook in the `mystorage` area to make sure you can use it when you get back after period of incativity.

## Session persistence

The Jupyter instance will be running as long as you interact with it, and will be kept alive for another 8 hours after your last activity.
After this time the instance will be shut-off and you will need to launch it during the next log in.
All data saved in `mystorage` will be preserved but all other files will be deleted and additional packages (dependencies) which were installed using pip need to be reinstalled.



## Tips and tricks

### Switching from Jupyter Lab to Classic Jupyter Notebook Interface

If you would like to switch to the  Classic Jupyter Notebook Interface, you can modify the URL of the web application. Simply change the last part of the URL address from "lab" to "tree".

For example, you can change `https://jupyterhub.dataspace.copernicus.eu/user/username/lab/` to `https://jupyterhub.dataspace.copernicus.eu/user/username/tree/`. This way, you can easily access the Classic Jupyter Notebook Interface if desired.


## Resources and References:

Here are some helpful links for effectively using JupyterLab in Copernicus Dataspace Ecosystem:

* [JupyterLab Documentation](https://jupyterlab.readthedocs.io/en/stable/){target="_blank"}
* [Notebook Documentation](https://jupyter-notebook.readthedocs.io/en/stable/){target="_blank"}
* [Basic Notebook Tutorials](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Notebook%20Basics.html){target="_blank"}

