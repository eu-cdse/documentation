---
title: "Jupyter Hub"
---

JupyterHub is a platform that provides an environment for creating, managing, and terminating Jupyter Notebooks. It acts as a central hub or server that handles the setup of user-specific notebook instances. Users access their notebooks through Jupyterlab or Jupyter Notebooks. The hub itself handles the underlying management tasks, such as allocating resources, handling user authentication, and starting or stopping notebook instances as needed.

Registered Copernicus Data Space Users have access to JupyterLab and Jupyter Notebooks free 
of charge at a limited capacity of resources beneath.

## Jupyter Notebook and JupyterLab

Jupyter Notebooks serve as an accessible entry point for both non-programmers and developers who want to quickly prototype their EO data processing. They provide a user-friendly interface, integrating well with Python SDK services like Sentinel Hub and OpenEO. Each Notebook has direct access to the EO Data repository, and example notebooks are available to facilitate data interaction. To handle tool dependencies and library versions, multiple notebook kernels are provided and regularly updated with the provided samples. This eliminates the need for users to handle dependency installations, enabling immediate prototyping without technical obstacles.


JupyterLab is an advanced interactive development environment (IDE) that offers a flexible and feature-rich interface for working with Jupyter notebooks, code, and data. It surpasses the traditional Jupyter Notebook interface, providing a modern and comprehensive user experience. JupyterLab allows users to organize their workspaces using a flexible layout system with panels, views, and tabs for various activities. It supports various document formats, including Jupyter notebooks, text files, code files, and markdown files. With its modular and extensible architecture, JupyterLab enables customization through extensions, additional functionalities, and integration with external tools. It enhances the user experience with features like a file browser, command palette, debugger, and console, making it a versatile tool for interactive data exploration, analysis, and scientific computing.


User can access the Jupyter environment when clicked on this link: [https://jupyterhub.dataspace.copernicus.eu/](https://jupyterhub.dataspace.copernicus.eu/){target="_blank"}

![](_images/jupyter_login.png)

When you click the "SIGN IN WITH KEYCLOAK" button, you will be directed to the Copernicus Dataspace login window. After successfully signing in, a window with an option to select among two different cluster will be launched. With the selection among one of the processing environment, the JupyterLab interface will be loaded.


## JupyterLab User Interface

Once you have successfully signed in, you will be presented with a launcher that offers various Python environments to work in, including Python 3, Geo science, OpenEO, and Sentinel Hub. Each environment is equipped with specific Python packages tailored to different requirements. You can choose to run your code either in a notebook or a console, depending on your preference. Additionally, the launcher provides options to create text files, markdown files, or Python files, allowing you to work with different types of documents as needed.

![](_images/FirstLook_jupyter.png)

1. Main Work Area:
    The main work area in JupyterLab is the central portion of the interface where users perform their tasks. It consists of tabs representing open documents like notebooks, code files, and markdown files. These tabs can be arranged and docked within the work area, allowing users to customize their workspace to suit their needs and preferences.

2. Sidebar:
    The sidebar, located on the left side of the interface, provides additional functionality and information. It houses various panels, including a file browser for easy navigation through files and folders, a list of running kernels and terminals, and a table of contents for quick access to different sections of a notebook or document.

3. Launcher:
    The launcher is a central component that enables users to create new documents and launch different activities. Users can access other useful activities such as a command palette for executing commands, a file finder for quickly locating specific files, and a help panel for accessing documentation and assistance.

4. Menu Bar:
    The menu bar, located at the top of the interface, provides a set of menus with various options. Users can perform file operations, edit documents, configure the appearance and behavior of JupyterLab, manage kernels for code execution, and access other advanced features.

5. Contextual Tabs:
    Contextual tabs are dynamic and appear in the below menu bar when a notebook is open, as in the above figure for the .ipynb file.  These tabs provide relevant options and settings specific to the selected item, allowing users to perform actions and configurations directly within the interface.

::: {.callout-tip collapse="true"} 

Users can drag files from the file browser and drop them into notebooks or code files to import them seamlessly. Additionally, cells within a notebook can be rearranged by simply dragging and dropping them to different positions, facilitating the organization and structuring of notebook content.

:::

These components collectively form the JupyterLab user interface, providing users with a flexible and customizable workspace for working with notebooks, code, and data. 

## Creating and Managing Notebooks

By default, sample notebooks are provided in the folder samples. 

To create a notebook in JupyterLab, you can easily select your desired kernel under the Notebook section in the launcher. Simply click on the kernel you want, and a new notebook named "Untitled. ipynb" will be created. If you wish to rename the notebook, you can do so by right-clicking on the notebook name in the sidebar and selecting the "rename" option. This gives your notebook a more meaningful and descriptive name for better organisation and clarity.

## Installing additional packages

You can install additional Python packages. This can be done both from the Notebook Terminal, which is located in the Launcher tab or within a Notebook cell. For e.g.:

::: {.panel-tabset}

# Terminal

`pip install required_package`

# Notebook

`!pip install required_package`

:::


## Markdown and Rich Text

In JupyterLab, you can create Markdown and rich text content either in a separate file or directly within Jupyter notebooks. 

If you prefer to work with a separate file, you can create a new Markdown (.md) or text (.txt) from the launcher or right click on the side bar and New file. Open the file and start writing your Markdown content using the Markdown syntax. Once you've written your content, you can save the file and preview it by double-clicking on it in the file browser, which will open a preview pane showing the rendered Markdown.

Alternatively, you can include Markdown and rich text directly within Jupyter Notebooks. In a notebook, you can create a new cell and change its type to "Markdown" using the cell type dropdown in the toolbar or by pressing  `M`. Then, you can write your Markdown content in the cell using the Markdown syntax. To preview the rendered Markdown, you can either run the cell by pressing `Shift` + `Enter`, or use the "Preview" option from the cell's context menu to see the rendered content without executing the cell's code.



<!-- ## Copernicus Dataspace Dataset

Each Notebook has a direct access to the EO Data repository. -->


## Collaboration and Sharing

JupyterLab allows collaborative work with the functionality to share it with multiple users. They can edit and view the same notebooks or projects in real-time. JupyterLab also offers various sharing options, including exporting notebooks to different formats (HTML, PDF, Markdown) and publishing them on platforms like GitHub or JupyterHub. These features empower users to easily share their work, communicate findings, and collaborate with a broader audience, promoting efficient collaboration and seamless knowledge dissemination..

## Basic notebook commands

Working with a Notebook is pretty convenient and the supporting text should enable a quick understanding of the presented code. Some basic Notebook commands are listed below:

| Keyboard Shortcut | Command                          |
|-------------------|----------------------------------|
| Ctrl + Enter      | Run cell                         |
| A                 | Insert cell above current cell    |
| B                 | Insert cell below current cell    |
| C                 | Copy cell code                   |
| V                 | Paste cell code                  |
| DD                | Delete selected cell             |
| M                 | Change cell to Markdown (text) mode |


## Tips and tricks

### Switching from Jupyter Lab to Jupyter Notebook

If you would like to switch to the Jupyter Notebook interface, you can modify the URL in your home directory. Simply change the last part of the URL address from "lab" to "tree".
For example, you can change `https://jupyterhub.dataspace.copernicus.eu/user/username/lab/` to `https://jupyterhub.dataspace.copernicus.eu/user/username/tree/`. This way, you can easily access the Jupyter Notebook interface if desired.



## Resources and References:

Here are some helpful links for effectively using Jupyter Lab in Copernicus Dataspace Ecosystem:

* [JupyterLab Documentation](https://jupyterlab.readthedocs.io/en/stable/){target="_blank"}
* [Jupyter Notebook Documentation](https://jupyter-notebook.readthedocs.io/en/stable/){target="_blank"}
* [Jupyter Notebook Documentation](https://maxmelnick.com/2016/04/19/python-beginner-tips-and-tricks.html){target="_blank"}
* [Basic Notebook Tutorials](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Notebook%20Basics.html){target="_blank"}

