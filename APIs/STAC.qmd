---
title: STAC product catalogue
---



**STAC** (SpatioTemporal Asset Catalog) is a relatively new web service specification for catalogs that is increasingly used and supported. STAC data have become a de-facto standard in the EO community, also being onboarded to OGC at the moment. STAC items are provided for all online products, as well as for products generated by users within the Copernicus Data Space Ecosystem.

The Copernicus Data Space Ecosystem STAC API was implemented as a web service interface to query over a group of STAC collections held in a database. 
All fields included in Data Space API are consistent with the [STAC Specification](https://stacspec.org/en){target="_blank"}.

The service implements the STAC API version v1.0.0. The version exposed in the Copernicus Data Space Ecosystem is still subject to change as the quality of STAC metadata is still improving. Nevertheless, it already supports basic product search.

## Endpoint URL

The Copernicus Data Space Ecosystem STAC API Catalog can be accessed using the following URL:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac`](https://catalogue.dataspace.copernicus.eu/stac){target="_blank"}

:::

## Available Collections

The data are organized in so-called collections corresponding to various satellites.

The following collections are currently available via STAC API:

* Copernicus Sentinel Mission
  * **SENTINEL-1**
  * **SENTINEL-2**
  * **SENTINEL-3**
  * **SENTINEL-5P**
  * **SENTINEL-6**
  * **SENTINEL-1-RTC** (Sentinel-1 Radiometric Terrain Corrected)

* Complementary data
  * **GLOBAL-MOSAICS** (Sentinel-1 and Sentinel-2 Global Mosaics)
  * **SMOS** (Soil Moisture and Ocean Salinity)
  * **ENVISAT** (ENVISAT- Medium Resolution Imaging Spectrometer - MERIS)
  * **LANDSAT-5**
  * **LANDSAT-7**
  * **LANDSAT-8-ESA**
  * **COP-DEM** (Copernicus DEM)
  * **TERRAAQUA** (Terra MODIS and Aqua MODIS)
  * **S2GLC** (S2GLC 2017)
  
## STAC Collections Search

STAC Collections endpoint lets users get information about collections available in the Copernicus Data Space Ecosystem catalogue. 

To access the information about all STAC API Collections:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections`](https://catalogue.dataspace.copernicus.eu/stac/collections){target="_blank"}

:::


To access the information about a specified STAC API Collection (e.g. SENTINEL-2):

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-2`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-2){target="_blank"}

:::


## STAC Items Search

Search for items is possible among all collections [Items Search in all STAC Collections](https://documentation.dataspace.copernicus.eu/APIs/STAC.html#items-search-in-all-stac-collections) or in one specified collection only [Items Search in a STAC Collection](https://documentation.dataspace.copernicus.eu/APIs/STAC.html#items-search-in-a-stac-collection).

::: {.callout-note}

To accelerate the query performance, it is recommended to search for Items within one specified collection, e.g.:

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-3/items`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-3/items){target="_blank"}

:::

### Items Search in a STAC Collection

#### Search for items in a collection

To list items in a given collection:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items){target="_blank"}

:::

By default, the catalogue will limit the number of shown items to 20. It can be changed by filtering with the limit option as described below [Limit option](https://documentation.dataspace.copernicus.eu/APIs/STAC.html#limit-option).

#### Search for a specific item

To list a specific item in a collection:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items/S1A_IW_SLC__1SDV_20221231T100709_20221231T100736_046574_0594DE_0A58.SAFE`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items/S1A_IW_SLC__1SDV_20221231T100709_20221231T100736_046574_0594DE_0A58.SAFE){target="_blank"}

:::

#### Search for items by attributes

To list items with a given attribute:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?datetime=2022-12-31T09:59:31.293Z/ `](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?datetime=2022-12-31T09:59:31.293Z/ ){target="_blank"}

:::

Currently, those attributes are supported:

* `bbox`
* `datetime`
* `ids`(Items Ids)

##### Search Items by bbox

Attribute `bbox` will list all products from a given collection within the Area of Interest (AOI). This attribute requires between 4 and 6 values (coordinates) where a comma separates each coordinate.

To search for items by bbox:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?bbox=-80.673805,-0.52849,-78.060341,1.689651 `](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?bbox=-80.673805,-0.52849,-78.060341,1.689651 ){target="_blank"}

:::

##### Search Items by datetime

Attribute `datetime` will list all products within a specified time interval.

To search for items within specified datetime:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?datetime=2021-12-31T09:59:31.293Z/2023-12-31T09:59:31.293Z`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?datetime=2021-12-31T09:59:31.293Z/2023-12-31T09:59:31.293Z){target="_blank"}

:::

Attribute `datetime` can search for several different formats:

* 2022-12-31T00:00:00Z
* 2022-12-31T00:00:00
* 2022-12-31T16:00:00-08:00
* 2022-12-31T00:00:00+01:00
* 2022-12-31T00:00:00.000Z
* 2022-12-31T00:00:00.000

`datatime` intervals:

* /2021-12-31T23:59:59Z (open start interval)
* 2021-12-31T23:59:59Z/ (open end interval)
* 2022-12-30T00:00:00Z/2022-12-31T23:59:59Z (closed interval)

Please note that those are example values and might not return anything if input.

##### Search Items by ids

To search for products by their Ids:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-2/items?ids=S2A_MSIL2A_20150715T094306_N0204_R036_T33SXA_20150715T094315.SAFE,S2A_MSIL2A_20150715T112846_N0204_R037_T29RLH_20150715T112845.SAFE`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-2/items?ids=S2A_MSIL2A_20150715T094306_N0204_R036_T33SXA_20150715T094315.SAFE,S2A_MSIL2A_20150715T112846_N0204_R037_T29RLH_20150715T112845.SAFE){target="_blank"}

:::


#### Search Items by two or more attributes

To list items by two or more attributes:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?bbox=-80.673805,-0.52849,-78.060341,1.689651&datetime=2014-10-13T23:28:54.650Z`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?bbox=-80.673805,-0.52849,-78.060341,1.689651&datetime=2014-10-13T23:28:54.650Z){target="_blank"}

:::

#### Limit option

The limit option allows users to increase or decrease the number of items shown. 

The default value is set to 20.

The acceptable arguments for this option: Integer <0,1000>

To list a limited number of items:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?datetime=2022-12-31T09:59:31.293Z/&limit=10`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?datetime=2022-12-31T09:59:31.293Z/&limit=10){target="_blank"}

:::

#### Sortby option

The sortby option allows users to define the fields by which to sort results.

The acceptable arguments for this option are:

* `end_datetime`
* `start_datetime`
* `datetime`

To set the sort order, the prefix should be added to the sort parameter:

* **+** for ascending (in https standard **+** sign should be encoded with **%2B**)
* **-** for descending

If no prefix is provided, ascending order is assumed.

To sort items within a specified collection:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?datetime=2021-12-31T09:59:31.293Z/&sortby=-start_datetime`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?datetime=2021-12-31T09:59:31.293Z/&sortby=-start_datetime){target="_blank"}

:::

#### Page option

The page option determines the page of results.

The acceptable arguments for this option: Integer <1,100>

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?datetime=2022-12-31T09:59:31.293Z/&page=32`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/items?datetime=2022-12-31T09:59:31.293Z/&page=32){target="_blank"}

:::

### Items Search in all STAC Collections

If users would like to list items from any collection, they can use search option, which will search all collections.

To list items in any collection:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/search?`](https://catalogue.dataspace.copernicus.eu/stac/search?){target="_blank"}

:::


This endpoint enables searching with simple filtering by:

* collectionId
* `ids`(Items Ids)
* `datetime`
* `bbox`

Also, the following options are supported:

* limit
* sortby
* page

#### Search by attributes

Listing by attributes and using the limit option works the same way as before:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/search?ids=S2A_MSIL2A_20150715T094306_N0204_R036_T33SXA_20150715T094315.SAFE,S2A_MSIL2A_20150715T112846_N0204_R037_T29RLH_20150715T112845.SAFE&datetime=2015-07-15T00:00:00.000Z/&limit=10`](https://catalogue.dataspace.copernicus.eu/stac/search?ids=S2A_MSIL2A_20150715T094306_N0204_R036_T33SXA_20150715T094315.SAFE,S2A_MSIL2A_20150715T112846_N0204_R037_T29RLH_20150715T112845.SAFE&datetime=2015-07-15T00:00:00.000Z/&limit=10){target="_blank"}

:::

Currently those attributes are available:

* `bbox`
* `datetime`
* `ids`(Items Ids)

#### Search items for many collections

Using /search option allows the user to list more than one collection.

To list more than one collection:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/search?collections=SENTINEL-1,SENTINEL-2`](https://catalogue.dataspace.copernicus.eu/stac/search?collections=SENTINEL-1,SENTINEL-2){target="_blank"}

:::

## STAC Advanced filters

STAC Filter extensions allow users to search for items based on their attributes.

Currently, those advanced filters are supported:

* CQL2 JSON
* Filter parameters: filter, filter-crs (default and only accepted CRS84), filter-lang (json)

Endpoint URL for the POST method: 

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/search`](https://catalogue.dataspace.copernicus.eu/stac/search){target="_blank"}

:::

Following endpoints have been added to allow users to check for available parameters when writing filter expressions.

To access queryable names for STAC API Item Search filter across the entire catalogue:

::: {.panel-tabset}

# HTTPS Request

[`https://catalogue.dataspace.copernicus.eu/stac/queryables`](https://catalogue.dataspace.copernicus.eu/stac/queryables){target="_blank"}

:::


To check acceptable queryable names for Copernicus Sentinel Missions:

::: {.panel-tabset}

# SENTINEL-1

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1/queryables){target="_blank"}

# SENTINEL-2

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-2/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-2/queryables){target="_blank"}

# SENTINEL-3

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-3/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-3/queryables){target="_blank"}

# SENTINEL-5P

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-5P/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-5P/queryables){target="_blank"}

# SENTINEL-6

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-6/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-6/queryables){target="_blank"}

# SENTINEL-1-RTC

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1-RTC/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/SENTINEL-1-RTC/queryables){target="_blank"}

:::

To check acceptable queryable names for Complementary data:

::: {.panel-tabset}

# GLOBAL-MOSAICS

[`https://catalogue.dataspace.copernicus.eu/stac/collections/GLOBAL-MOSAICS/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/GLOBAL-MOSAICS/queryables){target="_blank"}

# SMOS

[`https://catalogue.dataspace.copernicus.eu/stac/collections/SMOS/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/SMOS/queryables){target="_blank"}

# ENVISAT

[`https://catalogue.dataspace.copernicus.eu/stac/collections/ENVISAT/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/ENVISAT/queryables){target="_blank"}

# LANDSAT-5

[`https://catalogue.dataspace.copernicus.eu/stac/collections/LANDSAT-5/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/LANDSAT-5/queryables){target="_blank"}

# LANDSAT-7

[`https://catalogue.dataspace.copernicus.eu/stac/collections/LANDSAT-7/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/LANDSAT-7/queryables){target="_blank"}

# LANDSAT-8-ESA

[`https://catalogue.dataspace.copernicus.eu/stac/collections/LANDSAT-8-ESA/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/LANDSAT-8-ESA/queryables){target="_blank"}

# COP-DEM

[`https://catalogue.dataspace.copernicus.eu/stac/collections/COP-DEM/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/COP-DEM/queryables){target="_blank"}

# TERRAAQUA

[`https://catalogue.dataspace.copernicus.eu/stac/collections/TERRAAQUA/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/TERRAAQUA/queryables){target="_blank"}

# S2GLC

[`https://catalogue.dataspace.copernicus.eu/stac/collections/S2GLC/queryables`](https://catalogue.dataspace.copernicus.eu/stac/collections/S2GLC/queryables){target="_blank"}

:::


### Query structure

To search for products using STAC Advanced filters, users must define a query in a request body and use the POST method. Simplest expression, looking for a specific item:

**POST**

[`https://catalogue.dataspace.copernicus.eu/stac/search`](https://catalogue.dataspace.copernicus.eu/stac/search){target="_blank"}

**Request body**:
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "and",
        "args": [
            {
                "op": "=",
                "args": [
                    {
                        "property": "collection"
                    },
                    "SENTINEL-1"
                ]
            },
            {
                "op": "=",
                "args": [
                    {
                        "property": "id"
                    },
                    "S1A_IW_RAW__0SDV_20230106T110100_20230106T110132_046662_0597C3_F5B4.SAFE"
                ]
            }
        ]
    }
}
```

To search within a specific collection, its name must be included in the request body.


### Available operators

Currently, those operators are supported:

* **Comparison Operators:** equal to, not equal to, less than, less than or equal to, greater than, greater than or equal to, is Null

* **Advanced Comparison Operators:** Like, Between, In, And, Or, Not

* **Spatial Operators:** S_CONTAINS, S_CROSSES, S_DISJOINT, S_EQUALS, S_INTERSECTS, S_OVERLAPS, S_TOUCHES, S_WITHIN

* **Temporal Operators:** T_AFTER, T_BEFORE, T_CONTAINS, T_DISJOINT, T_DURING, T_EQUALS, T_FINISHEDBY, T_FINISHES, T_INTERSECTS, T_MEETS, T_METBY, T_OVERLAPPEDBY, T_OVERLAPS, T_STARTEDBY, T_STARTS

The following table describes available operators for given attributes:

```{=html}

<div style="table-responsive">
    <table class="table-quotas">
        <thead>
            <tr>
                    <th style="text-align: center; vertical-align: middle; width:50%">Operator / property</th>
                    <th style="text-align: center; vertical-align: middle; width:50%">attribute string</th>
                    <th style="text-align: center; vertical-align: middle; width:50%">attribute int</th>
                    <th style="text-align: center; vertical-align: middle; width:50%">attribute float</th>
					<th style="text-align: center; vertical-align: middle; width:50%">attribute bool</th>
                    <th style="text-align: center; vertical-align: middle; width:50%">attribute datetime</th>
                    <th style="text-align: center; vertical-align: middle; width:50%">geometry (footprint)</th>
                    <th style="text-align: center; vertical-align: middle; width:50%">id (name)</th>
					<th style="text-align: center; vertical-align: middle; width:50%">collection</th>
                    <th style="text-align: center; vertical-align: middle; width:50%">start_datetime (content_start_date)</th>
                    <th style="text-align: center; vertical-align: middle; width:50%">end_datetime (content_end_date)</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="text-align: left; vertical-align: middle">Equal to</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
            </tr>
            <tr>
                <td style="text-align: left; vertical-align: middle">Not equal to</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
            </tr>
			<tr>
                <td style="text-align: left; vertical-align: middle">Less than</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
            </tr>
			<tr>
                <td style="text-align: left; vertical-align: middle">Less than or equal to</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
            </tr>
			<tr>
                <td style="text-align: left; vertical-align: middle">Greater than</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
            </tr>
			<tr>
                <td style="text-align: left; vertical-align: middle">Greater than or equal to</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
            </tr>
			<tr>
                <td style="text-align: left; vertical-align: middle">Is Null</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
            </tr>
			<tr>
                <td style="text-align: left; vertical-align: middle">Like</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
            </tr>
			<tr>
                <td style="text-align: left; vertical-align: middle">Between</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
            </tr>
			<tr>
                <td style="text-align: left; vertical-align: middle">In</td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
            </tr>
			<tr>
                <td style="text-align: left; vertical-align: middle">Spatial Operators</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
            </tr>
			<tr>
                <td style="text-align: left; vertical-align: middle">Temporal Operators</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
				<td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle">N/A</td>
                <td style="text-align: center; vertical-align: middle"></td>
				<td style="text-align: center; vertical-align: middle"></td>
            </tr>
        </tbody>
    </table>
</div>

```

### Examples

For each group of operators, examples are provided in the request body for the POST method and the following endpoint:

**POST**

[`https://catalogue.dataspace.copernicus.eu/stac/search`](https://catalogue.dataspace.copernicus.eu/stac/search){target="_blank"}


#### Comparison Operators

::: {.panel-tabset}

# EQUAL TO
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "=",
        "args": [
            {
                "property": "cloudCover"
            },
            10
        ]
    }
}
```

# NOT EQUAL TO
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "<>",
        "args": [
            {
                "property": "cloudCover"
            },
            10
        ]
    }
}
```

# LESS THAN
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "<",
        "args": [
            {
                "property": "cloudCover"
            },
            10
        ]
    }
}
```

# LESS THAN OR EQUAL TO
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "<=",
        "args": [
            {
                "property": "cloudCover"
            },
            10
        ]
    }
}
```

# GREATER THAN
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": ">",
        "args": [
            {
                "property": "cloudCover"
            },
            10
        ]
    }
}
```

# GREATER THAN OR EQUAL TO
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": ">=",
        "args": [
            {
                "property": "cloudCover"
            },
            10
        ]
    }
}
```

# IS NULL
```{json}
{
    "filter": {
        "op": "and",
        "args": [
            {
                "op": "=",
                "args": [
                    {
                        "property": "collection"
                    },
                    "SENTINEL-3"
                ]
            },
            {
                "op": "isNull",
                "args": [
                    {
                        "property": "cloudCover"
                    }
                ]
            }
        ]
    }
}
```

:::


#### Advanced Comparison Operators

::: {.panel-tabset}

# LIKE
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "and",
        "args": [
            {
                "op": "=",
                "args": [
                    {
                        "property": "collection"
                    },
                    "SENTINEL-2"
                ]
            },
            {
                "op": "like",
                "args": [
                    {
                        "property": "productType"
                    },
                    "AUX%"
                ]
            }
        ]
    }
}
```

# BETWEEN
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "and",
        "args": [
            {
                "op": "=",
                "args": [
                    {
                        "property": "collection"
                    },
                    "SENTINEL-2"
                ]
            },
            {
                "op": "between",
                "args": [
                    {
                        "property": "cloudCover"
                    },
                    10,
                    50
                ]
            }
        ]
    }
}
```

# IN
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "in",
        "args": [
            {
                "property": "operationalMode"
            },
            [
                "IW",
                "EW",
                "WV"
            ]
        ]
    }
}
```

# AND
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "and",
        "args": [
            {
                "op": "=",
                "args": [
                    {
                        "property": "id"
                    },
                    "S2A_MSIL1C_20240512T230341_N0510_R101_T59PRL_20240513T014351.SAFE"
                ]
            },
            {
                "op": "=",
                "args": [
                    {
                        "property": "collection"
                    },
                    "SENTINEL-2"
                ]
            }
        ]
    }
}
```

# OR
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "or",
        "args": [
            {
                "op": ">",
                "args": [
                    {
                        "property": "orbitNumber"
                    },
                    4000
                ]
            },
            {
                "op": "<",
                "args": [
                    {
                        "property": "cloudCover"
                    },
                    10
                ]
            }
        ]
    }
}
```

# NOT
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "not",
        "args": [
            {
                "op": "=",
                "args": [
                    {
                        "property": "collection"
                    },
                    "SENTINEL-3"
                ]
            }
        ]
    }
}
```

:::


#### Spatial Operators

Spatial operators specify a  set of advanced functions based on Dimensionally Extended Nine-intersection Model (DE-9IM), enabling precise spatial queries and relationships between geometries in STAC API. The queries within spatial operators are supported for:

* Bbox
* Point
* LineString
* Polygon
* MultiPoint
* MultiLineString
* MultiPolygon


Check if the item's geometry contains a specified geometry:

::: {.panel-tabset}

# S_CONTAINS
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "s_contains",
        "args": [
            {
                "property": "geometry"
            },
            {
                "type": "Polygon",
                "coordinates": [
                    [
                        [
                            21.0,
                            52.0
                        ],
                        [
                            21.0,
                            52.5
                        ],
                        [
                            21.5,
                            52.5
                        ],
                        [
                            21.5,
                            52.0
                        ],
                        [
                            21.0,
                            52.0
                        ]
                    ]
                ]
            }
        ]
    }
}
```

:::

Check if the item's geometry crosses within a specified geometry:

::: {.panel-tabset}

# S_CROSSES
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "s_crosses",
        "args": [
            {
                "property": "geometry"
            },
            {
                "type": "LineString",
                "coordinates": [
                    [
                        20.5,
                        52.0
                    ],
                    [
                        21.5,
                        52.5
                    ]
                ]
            }
        ]
    }
}
```

:::

Check if the item's geometry doesn’t intersect with a specified geometry:

::: {.panel-tabset}

# S_DISJOINT
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "s_disjoint",
        "args": [
            {
                "property": "geometry"
            },
            {
                "type": "Polygon",
                "coordinates": [
                    [
                        [
                            21.5,
                            53.0
                        ],
                        [
                            21.5,
                            53.5
                        ],
                        [
                            22.0,
                            53.5
                        ],
                        [
                            22.0,
                            53.0
                        ],
                        [
                            21.5,
                            53.0
                        ]
                    ]
                ]
            }
        ]
    }
}
```

:::

Check if the item's geometry exactly matches a specified geometry:

::: {.panel-tabset}

# S_EQUALS
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "s_equals",
        "args": [
            {
                "property": "geometry"
            },
            {
                "type": "Polygon",
                "coordinates": [
                    [
                        [
                            10.700306,
                            49.665051
                        ],
                        [
                            14.264574,
                            50.068405
                        ],
                        [
                            13.874475,
                            51.689091
                        ],
                        [
                            10.182405,
                            51.28339
                        ],
                        [
                            10.700306,
                            49.665051
                        ]
                    ]
                ]
            }
        ]
    }
}
```

:::

Check if the item's geometry intersects with a specified geometry:

::: {.panel-tabset}

# S_INTERSECTS
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "s_intersects",
        "args": [
            {
                "property": "geometry"
            },
            {
                "type": "Point",
                "coordinates": [
                    36.319836,
                    32.288087
                ]
            }
        ]
    }
}
```

:::

Check if the item's geometry overlaps with a specified geometry:

::: {.panel-tabset}

# S_OVERLAPS
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "s_overlaps",
        "args": [
            {
                "property": "geometry"
            },
            {
                "type": "Polygon",
                "coordinates": [
                    [
                        [
                            21.2,
                            52.1
                        ],
                        [
                            21.2,
                            52.4
                        ],
                        [
                            21.6,
                            52.4
                        ],
                        [
                            21.6,
                            52.1
                        ],
                        [
                            21.2,
                            52.1
                        ]
                    ]
                ]
            }
        ]
    }
}
```

:::

Check if the item's geometry touches a specified geometry:

::: {.panel-tabset}

# S_TOUCHES
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "s_touches",
        "args": [
            {
                "property": "geometry"
            },
            {
                "type": "LineString",
                "coordinates": [
                    [
                        21.0,
                        52.0
                    ],
                    [
                        21.5,
                        52.0
                    ]
                ]
            }
        ]
    }
}
```

:::

Check if the item's geometry is within a specified geometry:

::: {.panel-tabset}

# S_WITHIN
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "s_within",
        "args": [
            {
                "property": "geometry"
            },
            {
                "type": "Polygon",
                "coordinates": [
                    [
                        [
                            21.2,
                            52.1
                        ],
                        [
                            21.2,
                            52.4
                        ],
                        [
                            21.6,
                            52.4
                        ],
                        [
                            21.6,
                            52.1
                        ],
                        [
                            21.2,
                            52.1
                        ]
                    ]
                ]
            }
        ]
    }
}
```

:::


#### Temporal Operators

Temporal operators provide a set of advanced functions for working with datetime types, offering greater expressiveness while querying STAC API.

Check if the item's datetime is after a specified datetime:

::: {.panel-tabset}

# T_AFTER
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_after",
        "args": [
            {
                "property": "datetime"
            },
            {
                "timestamp": "2023-01-01T00:00:00Z"
            }
        ]
    }
}
```

:::

This query will retrieve items where the datetime property is later than 2023-01-01T00:00:00Z. It can be used with a timestamp, as in the example above, or with an interval e.g.:

::: {.panel-tabset}

# T_AFTER
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_after",
        "args": [
            {
                "property": "datetime"
            },
            {
                "interval": [
                    "2023-01-01T00:00:00Z",
                    "2023-01-31T23:59:59Z"
                ]
            }
        ]
    }
}
```

:::

Check if the item's datetime is before a specified datetime:

::: {.panel-tabset}

# T_BEFORE
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_before",
        "args": [
            {
                "property": "datetime"
            },
            {
                "timestamp": "2023-01-01T00:00:00Z"
            }
        ]
    }
}
```

:::

This query will retrieve items where the datetime property is before 2023-01-01T00:00:00Z. It can be used with a timestamp or an interval.

Check if a specified interval contains the item's datetime:

::: {.panel-tabset}

# T_CONTAINS
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_contains",
        "args": [
            {
                "interval": [
                    {
                        "property": "start_datetime"
                    },
                    {
                        "property": "end_datetime"
                    }
                ]
            },
            {
                "interval": [
                    "2023-01-01T00:00:00Z",
                    "2023-01-31T23:59:59Z"
                ]
            }
        ]
    }
}
```

:::

Check if the item's datetime is outside a specified interval:

::: {.panel-tabset}

# T_DISJOINT
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_disjoint",
        "args": [
            {
                "property": "datetime"
            },
            {
                "timestamp": "2024-02-28T14:21:54.265255Z"
            }
        ]
    }
}
```

:::

Check if the item's datetime falls within a specified interval:

::: {.panel-tabset}

# T_DURING
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_during",
        "args": [
            {
                "interval": [
                    {
                        "property": "end_datetime"
                    },
                    {
                        "property": "end_datetime"
                    }
                ]
            },
            {
                "interval": [
                    "2023-01-01T00:00:00Z",
                    "2023-01-01T00:00:00Z"
                ]
            }
        ]
    }
}
```

:::

Check if the item's datetime exactly matches a specified datetime:

::: {.panel-tabset}

# T_EQUALS
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_equals",
        "args": [
            {
                "property": "datetime"
            },
            {
                "timestamp": "2023-01-01T00:00:00Z"
            }
        ]
    }
}
```

:::

Check if a specified interval is finished by the item's datetime:

::: {.panel-tabset}

# T_FINISHEDBY
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_finishedby",
        "args": [
            {
                "interval": [
                    {
                        "property": "start_datetime"
                    },
                    {
                        "property": "end_datetime"
                    }
                ]
            },
            {
                "interval": [
                    "2023-01-01T00:00:00Z",
                    "2023-01-30T00:00:00Z"
                ]
            }
        ]
    }
}
```

:::

Check if the item's datetime finishes a specified interval:

::: {.panel-tabset}

# T_FINISHES
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_finishes",
        "args": [
            {
                "interval": [
                    {
                        "property": "start_datetime"
                    },
                    {
                        "property": "end_datetime"
                    }
                ]
            },
            {
                "interval": [
                    "2023-01-01T00:00:00Z",
                    "2023-01-15T00:00:00Z"
                ]
            }
        ]
    }
}
```

:::

Check if the item's datetime intersects with a specified interval:

::: {.panel-tabset}

# T_INTERSECTS
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_intersects",
        "args": [
            {
                "property": "datetime"
            },
            {
                "interval": [
                    "2023-01-01T00:00:00Z",
                    "2023-01-31T23:59:59Z"
                ]
            }
        ]
    }
}
```

:::

Check if the item's datetime meets a specified interval:

::: {.panel-tabset}

# T_MEETS
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_meets",
        "args": [
            {
                "interval": [
                    {
                        "property": "start_datetime"
                    },
                    {
                        "property": "end_datetime"
                    }
                ]
            },
            {
                "interval": [
                    "2023-01-10T00:00:00Z",
                    "2023-01-15T00:00:00Z"
                ]
            }
        ]
    }
}
```

:::

Check if a specified interval meets the item's datetime:

::: {.panel-tabset}

# T_METBY
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_metby",
        "args": [
            {
                "interval": [
                    {
                        "property": "start_datetime"
                    },
                    {
                        "property": "end_datetime"
                    }
                ]
            },
            {
                "interval": [
                    "2023-01-10T00:00:00Z",
                    "2023-01-15T00:00:00Z"
                ]
            }
        ]
    }
}
```

:::

Check if a specified interval meets the item's datetime:

::: {.panel-tabset}

# T_OVERLAPPEDBY
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_overlappedby",
        "args": [
            {
                "interval": [
                    {
                        "property": "start_datetime"
                    },
                    {
                        "property": "end_datetime"
                    }
                ]
            },
            {
                "interval": [
                    "2023-01-10T00:00:00Z",
                    "2023-01-20T00:00:00Z"
                ]
            }
        ]
    }
}
```

:::

Check if the item's datetime overlaps with a specified interval:

::: {.panel-tabset}

# T_OVERLAPS
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_overlaps",
        "args": [
            {
                "interval": [
                    {
                        "property": "start_datetime"
                    },
                    {
                        "property": "end_datetime"
                    }
                ]
            },
            {
                "interval": [
                    "2023-01-10T00:00:00Z",
                    "2023-01-20T00:00:00Z"
                ]
            }
        ]
    }
}
```

:::

Check if a specified interval is started by the item's datetime:

::: {.panel-tabset}

# T_STARTEDBY
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_startedby",
        "args": [
            {
                "interval": [
                    {
                        "property": "start_datetime"
                    },
                    {
                        "property": "end_datetime"
                    }
                ]
            },
            {
                "interval": [
                    "2023-01-01T00:00:00Z",
                    "2023-01-15T00:00:00Z"
                ]
            }
        ]
    }
}
```

:::

Check if the item's datetime starts a specified interval:

::: {.panel-tabset}

# T_STARTS
```{json}
{
    "filter-lang": "cql2-json",
    "filter": {
        "op": "t_starts",
        "args": [
            {
                "interval": [
                    {
                        "property": "start_datetime"
                    },
                    {
                        "property": "end_datetime"
                    }
                ]
            },
            {
                "interval": [
                    "2023-01-01T00:00:00Z",
                    "2023-01-15T00:00:00Z"
                ]
            }
        ]
    }
}
```

:::
