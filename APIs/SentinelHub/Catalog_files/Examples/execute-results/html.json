{
  "hash": "67adbcf62eded1737f2e3b734ec04851",
  "result": {
    "markdown": "---\ntitle: Catalog API examples\nformat:\n  html:\n    code-fold: true\n---\n\nTo request data using any of the request below, you will need to replace\nthe string `<your access token>` with your Sentinel Hub access token.\nSentinel Hub access token will look something like this:\n\n``` default\nayJhbGciOiJSUzI1NiJ9.ayJzdWIiOiI0MmYwODZjCy1kMzI3LTRlOTMtYWMxNS00ODAwOGFiZjI0YjIiLCJhdWQiOiJlY2I1MGM1Zi1i\nMWM1LTQ3ZTgtYWE4NC0zZTU4NzJlM2I2MTEiLCJqdGkiOiI5MzYxMWE4ODEyNTM4Y2M0MmU0NDJjYjUyMTY0YmJlNyIsImV4cCI6MTU1N\nTQyMzk3MiwibmFtZSI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLCJlbWFpbCI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLC\nJzaWQiOiIzZjVjZDVkNS04MjRiLTQ3ZjYtODgwNy0wNDMyNWY4ODQxZmQifQ.U7FPOy_2jlEOFxXSjyN5KEdBROna3-Dyec0feShIbUOY\n1p9lEXdNaMmR5euiINi2RXDayX9Kr47CuSTsvq1zHFvZs1YgkFr1iH6kDuX-t_-wfWpqu5oPjoPVKZ4Rj0Ms_dxAUTQFTXR0rlbLuO-KS\ngnaeLVb5iiv_qY3Ctq2XKdIRcFRQLFziFcP4yZJl-NZMlwzsiiwjakcpYpI5jSYAdU2hpZLHRzceseeZt5YfZOe5Px1kZXro9Nd0L2GPC\n-qzOXw_V1saMGFa2ov8qV6Dvk92iv2SDDdGhOdII_JOf8XkK4E3g2z0EEFdWhG9F4Iky4ukNsqBPgE8LRb31s0hg\n```\n\nand can be obtained as described in the [Authentication\nchapter](/APIs/SentinelHub/Overview/Authentication.md).\n\n### Catalog API Entry page\n\nCatalog API Entry page with link to other catalog API endpoints and\navailable collections.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport requests\n```\n:::\n\n\n``` python\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/\"\nresponse = requests.get(url)\n\n```\n\n### List collections\n\nList all available collections. The list will include deployment\nspecific collections and collections available to users through BYOC,\nBatch or Third Party Data Import functionalities.\n\n``` python\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections\"\nresponse = requests.get(url)\n```\n\n### Sentinel 2 L1C collection\n\nList single collection, in this case Sentinel 2 L1C collection.\n\n``` python\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l1c/\"\nresponse = requests.get(url)\n```\n\n### Simple GET search\n\nSimple version of search available via GET request is also available.\nThe only query parameters that can be specified in this simpler version\nare: `bbox`, `datetime`, `collections`, `limit` and `next`.\n\n``` python\n\nquery = {\n    \"bbox\": \"13,45,14,46\",\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": \"sentinel-1-grd\",\n    \"limit\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.get(url, query=query)\n```\n\n### Simple POST search\n\nThe same parameters can also be specified a POST request, query\nparameters need to be specified as `json` formatted body and sent to\nserver like:\n\n``` python\n\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-10T23:59:59Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n```\n\n### Simple POST search with pagination\n\n`next` token can be specified in the request to get back the next page\nof results.\n\n``` python\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-10T23:59:59Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 5,\n    \"next\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n```\n\n### Search with GeoJSON\n\nInstead of `bbox` it is possible to add `intersects` attribute, which\ncan be any type of GeoJSON object (Point, LineString, Polygon,\nMultiPoint, MultiPolygon).\n\n``` python\ndata = {\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 5,\n    \"intersects\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            13,\n            45,\n        ],\n    },\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n```\n\n### Search with Filter\n\n`filter` object can be used to instruct server to only return a specific\nsubset of data.\n\n``` python\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 5,\n    \"filter\": \"sat:orbit_state='ascending'\",\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n```\n\n### Get Filter parameters for collection\n\nList all available filter parameters represented as JSON Schema.\n\n``` python\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-1-grd/queryables\"\nresponse = requests.get(url)\n```\n\n### Search with Fields: No fields\n\nDefault outputs from the server can be quite verbose for some\ncollections. By default, all available item properties are included in\nthe response.\n\n``` python\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-2-l1c\"],\n    \"limit\": 1,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n```\n\n### Search with Fields: Empty fields\n\n`fields` attribute can be specific to return less information. When\n`fields` object is empty only a default set of properties is included:\n`id`, `type`, `geometry`, `bbox`, `links`, `assets`.\n\n``` python\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-2-l1c\"],\n    \"limit\": 1,\n    \"fields\": {},\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n```\n\n### Search with Fields: Include\n\nBy specifying additional attributes in the `include` list, those\nattributes are added to the output along with the default ones.\n\n``` python\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-2-l1c\"],\n    \"limit\": 1,\n    \"fields\": {\"include\": [\"properties.gsd\"]},\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n```\n\n### Search with Fields: Exclude\n\n`exlude` list can be used to exclude even the default ones from the\noutput.\n\n``` python\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-2-l1c\"],\n    \"limit\": 1,\n    \"fields\": {\n        \"exclude\": [\"properties.datetime\"]\n    },\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n```\n\n### Search with distinct\n\nUsing `distinct` it is possible to get some overview of the data\navailable inside the specified query. For example specifying `date` as\nan option will return a list of dates where data is available.\n\n``` python\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-01T00:00:00Z/2020-01-01T00:00:00Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 100,\n    \"distinct\": \"date\",\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n```\n\nOr see different Sentinel 1 instrument modes used.\n\n``` python\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-01T00:00:00Z/2020-01-01T00:00:00Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 100,\n    \"distinct\": \"sar:instrument_mode\",\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n```\n\n### Search on BYOC/BATCH collections\n\nYou can search for features on your own BYOC or Batch collections. The\nfunctionality described above regarding GET and POST search is the same.\nThe only difference is that you have to specify the collection id with\nthe appropriate prefix on `collections` parameter (e.g:\n`byoc-<your-collection-id>` for byoc or `batch-<your-collection-id>` for\nbatch). Remember that you will have to use the appropriate deployment\nendpoint depending on where your collection is hosted.\n\n``` python\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-10T23:59:59Z\",\n    \"collections\": [\"byoc-<byoc-collection-id>\"],\n    \"limit\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n```\n\nOr using GET simple search endpoint:\n\n``` python\nquery = {\n    \"bbox\": \"13,45,14,46\",\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": \"batch-<batch-collection-id>\",\n    \"limit\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.get(url, query=query)\n```\n\n",
    "supporting": [
      "Examples_files"
    ],
    "filters": [],
    "includes": {}
  }
}