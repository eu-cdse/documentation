---
title: Utility Functions
---



## Visualizers

Visualizers are JavaScript classes with a method process which evaluates
the representation value for a pixel from pixel's band values.

### ColorMapVisualizer

Sets the color from a discrete color map.

#### Parameters

-   `valColPairs`
    **[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
    [number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]\>** 

#### Examples

``` javascript
const map = [
  [200, 0xff0000],
  [300, 0x0000ff ],
];

const visualizer = new ColorMapVisualizer(map);
visualizer.process(199); // returns [ 1, 0, 0 ]
visualizer.process(200); // returns [ 1, 0, 0 ]
visualizer.process(250); // returns [ 1, 0, 0 ]
visualizer.process(299); // returns [ 1, 0, 0 ]
visualizer.process(300); // returns [ 0, 0, 1 ]
```

#### process

Returns interpolated color for value.

##### Parameters

-   `val`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}** 

Returns
**\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]**
normalized RGB triplet.

#### createDefaultColorMap

Creates ColorMapVisualizer with following valColPairs

``` javascript
[
  [-1.0, 0x000000],
  [-0.2, 0xff0000],
  [-0.1, 0x9a0000],
  [0.0, 0x660000],
  [0.1, 0xffff33],
  [0.2, 0xcccc33],
  [0.3, 0x666600],
  [0.4, 0x33ffff],
  [0.5, 0x33cccc],
  [0.6, 0x006666],
  [0.7, 0x33ff33],
  [0.8, 0x33cc33],
  [0.9, 0x006600]
]
```

### ColorRampVisualizer

Provides a way to map values to colors. This is done by defining a
number of values and colors, with values between the defined input
values mapping to their interpolated colors, respectively. Colors may be
defined as hex color codes or a normalized (between 0 and 1) array
representing RGB.

#### Parameters

-   `ramps`  
-   `minVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    Optional override of the minimum value in `ramps`. Other values will
    be adjusted linearly.
-   `maxVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    Optional override of the maximum value in `ramps`. Other values will
    be adjusted linearly.

#### Examples

``` javascript
const ramps = [
  [200, 0xFF0000],
  [300, 0x0000FF]
];
or
const ramps = [
  [200, [1,0,0]],
  [300, [0,0,1]]
];

const visualizer = new ColorRampVisualizer(ramps);
visualizer.process(199); // [ 1, 0, 0 ]
visualizer.process(200); // [ 1, 0, 0 ]
visualizer.process(250); // [ 0.5019607843137255, 0, 0.5019607843137255 ]
visualizer.process(299); // [ 0.011764705882352941, 0, 0.9882352941176471 ]
visualizer.process(300); // [ 0, 1, 0 ]
```

#### inverse

Returns a new ColorRampVisualizer which is the inverse of the current
one. This means the color scale goes in the opposite direction.

#### process

Returns interpolated color for value.

##### Parameters

-   `value`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}** 

Returns
**\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]**
normalized RGB triplet.

#### createRedTemperature

Creates ColorRampVisualizer with valColPairs
[redTemperature](#redtemperature)

##### Parameters

-   `minVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    min value of interval
-   `maxVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    max value of interval

##### Examples

``` javascript
const visualizer = ColorRampVisualizer.createRedTemperature(0.0, 1.0);
visualizer.process(0.0); // returns [ 0, 0, 0 ]
visualizer.process(0.3); // returns [ 0.43137254901960786, 0, 0 ]
visualizer.process(0.5); // returns [ 0.7176470588235294, 0.047058823529411764, 0 ]
visualizer.process(0.8); // returns [ 1, 0.6196078431372549, 0.2 ]
visualizer.process(1.0); // returns [ 1, 1, 1 ]
```

Returns **[ColorRampVisualizer](#colorrampvisualizer)** 

#### createWhiteGreen

Creates ColorRampVisualizer with valColPairs [greenWhite](#greenwhite)

##### Parameters

-   `minVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    min value of interval
-   `maxVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    max value of interval

##### Examples

``` javascript
const visualizer = ColorRampVisualizer.createWhiteGreen(0.0, 1.0);
visualizer.process(0.0); // returns [ 0, 0, 0 ]
visualizer.process(0.3); // returns [ 0, 0.2980392156862745, 0 ]
visualizer.process(0.5); // returns [ 0.16862745098039217, 0.5019607843137255, 0 ]
visualizer.process(0.8); // returns [ 0.6666666666666666, 0.8, 0.3333333333333333 ]
visualizer.process(1.0); // returns [ 1, 1, 1 ]
```

Returns **[ColorRampVisualizer](#colorrampvisualizer)** 

#### createBlueRed

Creates ColorRampVisualizer with valColPairs [blueRed](#bluered)

##### Parameters

-   `minVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    min value of interval
-   `maxVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    max value of interval

##### Examples

``` javascript
const visualizer = ColorRampVisualizer.createBlueRed(0.0, 1.0);
visualizer.process(0.0); // returns [ 0, 0, 0.5019607843137255 ]
visualizer.process(0.3); // returns [ 0, 0.7019607843137254, 1 ]
visualizer.process(0.5); // returns [ 0.5019607843137255, 1, 0.5019607843137255 ]
visualizer.process(0.8); // returns [ 1, 0.2980392156862745, 0 ]
visualizer.process(1.0); // returns [ 0.5019607843137255, 0, 0 ]
```

Returns **[ColorRampVisualizer](#colorrampvisualizer)** 

#### createOceanColor

Creates ColorRampVisualizer with valColPairs [oceanColor](#oceancolor)

##### Parameters

-   `minVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    min value of interval
-   `maxVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    max value of interval

Returns **[ColorRampVisualizer](#colorrampvisualizer)** 

### ColorGradientVisualizer

#### Parameters

-   `valColPairs`
    **[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
    [number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]\>** 
-   `minVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    (optional, default `0.0`)
-   `maxVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    (optional, default `1.0`)

**Meta**

-   **deprecated**: Instead see
    [ColorRampVisualizer](#colorrampvisualizer)

    Interpolates a color based on interval.

#### process

Returns interpolated color for value.

##### Parameters

-   `val`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}** 

Returns
**\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]**
normalized RGB triplet.

#### createRedTemperature

##### Parameters

-   `minVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    min value of interval
-   `maxVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    max value of interval

##### Examples

``` javascript
const visualizer = ColorGradientVisualizer.createRedTemperature(0.0, 1.0);
visualizer.process(0.0); // returns [ 0, 0, 0 ]
visualizer.process(0.3); // returns [ 0.43137254901960786, 0, 0 ]
visualizer.process(0.5); // returns [ 0.7176470588235294, 0.047058823529411764, 0 ]
visualizer.process(0.8); // returns [ 1, 0.6196078431372549, 0.2 ]
visualizer.process(1.0); // returns [ 1, 1, 1 ]
```

Returns **[ColorGradientVisualizer](#colorgradientvisualizer)** 

**Meta**

-   **deprecated**: Instead see
    [ColorRampVisualizer](#colorrampvisualizer)

    Creates ColorGradientVisualizer with valColPairs
    [redTemperature](#redtemperature)

#### createWhiteGreen

##### Parameters

-   `minVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    min value of interval
-   `maxVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    max value of interval

##### Examples

``` javascript
const visualizer = ColorGradientVisualizer.createWhiteGreen(0.0, 1.0);
visualizer.process(0.0); // returns [ 0, 0, 0 ]
visualizer.process(0.3); // returns [ 0, 0.2980392156862745, 0 ]
visualizer.process(0.5); // returns [ 0.16862745098039217, 0.5019607843137255, 0 ]
visualizer.process(0.8); // returns [ 0.6666666666666666, 0.8, 0.3333333333333333 ]
visualizer.process(1.0); // returns [ 1, 1, 1 ]
```

Returns **[ColorGradientVisualizer](#colorgradientvisualizer)** 

**Meta**

-   **deprecated**: Instead see
    [ColorRampVisualizer](#colorrampvisualizer)

    Creates ColorGradientVisualizer with valColPairs
    [greenWhite](#greenwhite)

#### createBlueRed

##### Parameters

-   `minVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    min value of interval
-   `maxVal`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    max value of interval

##### Examples

``` javascript
const visualizer = ColorGradientVisualizer.createBlueRed(0.0, 1.0);
visualizer.process(0.0); // returns [ 0, 0, 0.5019607843137255 ]
visualizer.process(0.3); // returns [ 0, 0.7019607843137254, 1 ]
visualizer.process(0.5); // returns [ 0.5019607843137255, 1, 0.5019607843137255 ]
visualizer.process(0.8); // returns [ 1, 0.2980392156862745, 0 ]
visualizer.process(1.0); // returns [ 0.5019607843137255, 0, 0 ]
```

Returns **[ColorGradientVisualizer](#colorgradientvisualizer)** 

**Meta**

-   **deprecated**: Instead see
    [ColorRampVisualizer](#colorrampvisualizer)

    Creates ColorGradientVisualizer with valColPairs [blueRed](#bluered)

### HighlightCompressVisualizer

This is a piecewise linear function which compresses highlights. The
minValue and maxValue will be mapped inside the interval \[ 0, 1 \].
However, if maxValue lies in (0, 1) a second function which increases
much more slowly will be used to further map the values which are mapped
to 0.92 and above (see the figure below). This increases the visualized
dynamic range while keeping most of the interval of interest linear.
Useful, for example, for true color, with a maxValue of 0.4 to still
keep some detail in clouds.

![Piecewise linear function which compresses highlights](img/HighlightCompressVisualizerGraph.png "Piecewise linear function which compresses highlights")

#### Parameters

-   `minValue`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    the value which will be mapped to 0. All values smaller than
    minValue will also be mapped to 0. (optional, default `0.0`)
-   `maxValue`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    the value which controls the position of the boundary point between
    both linear functions. It will be mapped to approx. 0.9259, while
    values greater than or equal to (2\*maxValue - minValue) will be
    mapped to 1 (see the figure above). (optional, default `1.0`)
-   `gain` (optional, default `1.0`)
-   `offset` (optional, default `0.0`)
-   `gamma` (optional, default `1.0`)

#### Examples

``` javascript
const visualizer = new HighlightCompressVisualizer(0.1, 0.4)

visualizer.process(0); // will return 0
visualizer.process(0.1); // will return 0
visualizer.process(0.25); // will return 0.5
visualizer.process(0.376); // will return 0.92. Note: 0.376 = minValue + 0.92*(maxValue - minValue)
visualizer.process(0.4); // will return 0.9259
visualizer.process(0.7); // will return 1 Note: 0.7 is the smallest value mapped to 1.
visualizer.process(1.1); // will return 1
```

#### process

Returns mapped value.

##### Parameters

-   `val`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    the input value to be mapped.
-   `i`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    the index of val. This is EO Browser specific.

Returns
**\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]**
mapped value.

## Helper functions

Helper functions that can be used in custom scripts.

### int2rgb

Transforms a color as integer into RGB triplet.

#### Parameters

-   `color`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    as integer

#### Examples

``` javascript
int2rgb(255);    // returns [ 0, 0, 255 ]
int2rgb(256);    // returns [ 0, 1, 0 ]
int2rgb(65537);  // returns [ 1, 0, 1 ]
```

Returns
**\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]** 

### rgb2int

Inverse of the [int2rgb](#int2rgb) function. Transforms a RGB triplet
into integer.

#### Parameters

-   `color`
    **\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
    [number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
    [number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]**
    as RGB triplet

#### Examples

``` javascript
rgb2int([0, 0, 255]);  // returns 255
rgb2int([0, 1, 0]);    // returns 256
rgb2int([1, 0, 1]);    // returns 65537
```

Returns
**[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}** 

### normalizeRGB

Returns a new, normalized array without modifying the input array. It
does this by dividing by 255. The input range is expected between 0 and
255 giving an output between 0 and 1.

#### Parameters

-   `rgb255Array`  

### combine

Combines two colors.

#### Parameters

-   `color1`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    The first color defined as an array of values.
-   `color2`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    The second color defined as an array of values.
-   `alpha`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    A share of the first color defined as a floating point between 0 and
    1.

#### Examples

``` javascript
combine([100, 0, 0], [0, 100, 0], 1);   // returns [ 100, 0, 0 ]
combine([100, 0, 0], [0, 100, 0], 0);   // returns [ 0, 100, 0 ]
combine([100, 0, 0], [0, 100, 0], 0.5); // returns [ 50, 50, 0 ]
```

Returns
**[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
The combined color defined as an array of values.

### index

Calculate difference divided by sum

#### Parameters

-   `x`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    first value
-   `y`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    second value

#### Examples

``` javascript
index(0.6, 0.4); // returns 0.2
index(0.5, -0.5); //returns 0.0
```

Returns
**[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
`(x - y) / (x + y)`, if sum is 0 returns 0

### inverse

Calculate inverse value

#### Parameters

-   `x`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    value

#### Examples

``` javascript
inverse(2.0); // returns 0.5
inverse(5.0); // returns 0.2
inverse(0); // returns 1.7976931348623157E308
```

Returns
**[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
inverse of value of x (`1 / x`), if x is 0 returns
[JAVA_DOUBLE_MAX_VAL](#java_double_max_val)

### valueMap

Maps a value to another value bound by an interval (from,to\].

``` default
intervals = [-10, -5, 0, 5, 10], values = [-100,-50, 0, 50, 100]
defines the following mapping:
(-inf, -10]  => -100
(-10, -5] => -50
(-5,0] => 0
(0, 5] => 50
(5, +inf) => 100
```

#### Parameters

-   `value`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    input value
-   `intervals`
    **\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]**
    array of numbers in ascending order defining intervals
-   `values`
    **\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]**
    output value for the given interval

#### Examples

``` javascript
valueMap(5, [1, 3, 5, 7, 10], [100, 300, 500, 700, 900]); // returns 500
valueMap(1, [1, 3, 5, 7, 10], [100, 300, 500, 700, 900]); // returns 100
valueMap(2, [1, 3, 5, 7, 10], [100, 300, 500, 700, 900]); // returns 300
valueMap(12, [1, 3, 5, 7, 10], [100, 300, 500, 700, 900]); // returns 900
valueMap(50); // returns 50
```

Returns
**[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}** 

### valueInterpolate

Interpolates a value to another value bound by an interval (from,to\].
Values at far ends of defined intervals are clamped to min/max value.
This function is a replacement for the deprecated
[colorBlend](#colorblend) function.

``` default
intervals = [-10, -5, 0, 5, 10], values = [-1000,-50, 0, 50, 1000]
defines the following mapping:
(-inf, -10]  => -1000
(-10, -5] => (-1000, -50]
(-5,0] => (-50,0]
(0, 5] => (0,50]
(5, 10] => (50,1000]
(10, +inf) => 1000
```

#### Parameters

-   `value`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    input value
-   `intervals`
    **[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\>**
    array of numbers in ascending order defining intervals
-   `values`
    **([Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\>
    \|
    [Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\>\>)**
    output interval for the given value/interval of the intervals array

#### Examples

``` javascript
valueInterpolate(0, [-10, -5, 0, 5, 10], [-1000,-50, 0, 50, 1000]); // returns 0
valueInterpolate(-10, [-10, -5, 0, 5, 10], [-1000,-50, 0, 50, 1000]); // returns -1000
valueInterpolate(9, [-10, -5, 0, 5, 10], [-1000,-50, 0, 50, 1000]); // returns 810
valueInterpolate(50); // returns 50
valueInterpolate(0.1, [0, 0.2, 0.4, 0.6, 0.8, 1], [
  [0, 0, 0],
  [0.1, 0.2, 0.5],
  [0.25, 0.4, 0.5],
  [0.4, 0.6, 0.5],
  [0.75, 0.8, 0.5],
  [1, 1, 0.5]
]); // return [0.05, 0.1, 0.25]
```

Returns
**([number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}
\|
[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\>)** 

## Constants

### JAVA_DOUBLE_MAX_VAL

``` javascript
 const JAVA_DOUBLE_MAX_VAL = 1.7976931348623157E308;
```

Type:
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}

### blueRed

``` javascript
const blueRed = [
  [1.000, 0x000080],
  [0.875, 0x0000FF],
  [0.625, 0x00FFFF],
  [0.375, 0xFFFF00],
  [0.125, 0xFF0000],
  [0.000, 0x800000]
]
```

Type:
[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]\>

### redTemperature

``` javascript
const redTemperature = [
  [1.000, 0x000000],
  [0.525, 0xAE0000],
  [0.300, 0xFF6E00],
  [0.250, 0xFF8600],
  [0.000, 0xFFFFFF]
]
```

Type:
[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]\>

### greenWhite

``` javascript
const greenWhite = [
  [1.000, 0x000000],
  [0.600, 0x006600],
  [0.300, 0x80B300],
  [0.000, 0xFFFFFF]
]
```

Type:
[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]\>

### oceanColor

``` javascript
const oceanColor = [
[0.0000, normalizeRGB([147,0,108])],
[0.0471, normalizeRGB([111,0,144])],
[0.0980, normalizeRGB([72,0,183])],
[0.1490, normalizeRGB([33,0,222])],
[0.2000, normalizeRGB([0,10,255])],
[0.2471, normalizeRGB([0,74,255])],
[0.2980, normalizeRGB([0,144,255])],
[0.3490, normalizeRGB([0,213,255])],
[0.4000, normalizeRGB([0,255,215])],
[0.4471, normalizeRGB([0,255,119])],
[0.4980, normalizeRGB([0,255,15])],
[0.5490, normalizeRGB([96,255,0])],
[0.6000, normalizeRGB([200,255,0])],
[0.6471, normalizeRGB([255,235,0])],
[0.6980, normalizeRGB([255,183,0])],
[0.7490, normalizeRGB([255,131,0])],
[0.8000, normalizeRGB([255,79,0])],
[0.8471, normalizeRGB([255,31,0])],
[0.8980, normalizeRGB([230,0,0])],
[0.9490, normalizeRGB([165,0,0])],
[1.0000, normalizeRGB([105,0,0])]
]
```

Type:
[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<\[[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"},
[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\]\>

## colorBlend

### Parameters

-   `value`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    input value
-   `limits`
    **[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\>**
    array of numbers in ascending order defining intervals
-   `colors`
    **([Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\>
    \|
    [Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\>\>)**
    output interval for the given value/interval of the intervals array

Returns
**([number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}
\|
[Array](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array){target="_blank"}\<[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}\>)** 

**Meta**

-   **deprecated**: See [valueInterpolate](#valueinterpolate)

## Landsat8C2QaBandConditions

Cloud confidence, cloud shadow confidence, snow ice confidence and
cirrus confidence represent levels of confidence that a condition
exists:

-   0 = "Not Determined"
-   1 = "Low" = Low confidence.
-   2 = "Medium / Reserved" = Medium only for cloud confidence.
-   3 = "High" = High confidence.

Type:
[Object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object){target="_blank"}

### Properties

-   `fill`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    0 for image data, 1 for fill data
-   `dilatedCloud`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    0 for cloud is not dilated or no cloud, 1 for cloud dilation
-   `cirrus`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    0 for no confidence level or low confidence, 1 for high confidence
    cirrus
-   `cloud`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    0 for cloud confidence is not high, 1 for high confidence cloud
-   `cloudShadow`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    0 for cloud shadow confidence is not high, 1 for high confidence
    cloud shadow
-   `snow`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    0 for snow/ice confidence is not high, 1 for high confidence snow
    cover
-   `clear`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    0 if cloud or dilated cloud, or else 1
-   `water`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}**
    0 for land or cloud, 1 for water
-   `cloudConfidence`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}** 
-   `cloudShadowConfidence`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}** 
-   `snowIceConfidence`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}** 
-   `cirrusConfidence`
    **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number){target="_blank"}** 

## decodeL8C2Qa

Decodes Landsat 8 Collection 2 Quality Assessment band conditions.

### Parameters

-   `value` **integer** band pixel (16-bit value)

### Examples

``` javascript
decodeL8C2Qa(55052);
// returns {
//   cirrus: 1, cirrusConfidence: 3,
//   clear: 0,
//   cloud: 1,
//   cloudConfidence: 3,
//   cloudShadow: 0,
//   cloudShadowConfidence: 1,
//   dilatedCloud: 0,
//   fill: 0,
//   snow: 0,
//   snowIceConfidence: 1,
//   water: 0
// }
```

Returns **[Landsat8C2QaBandConditions](#landsat8c2qabandconditions)** 

## decodeS3OLCIQualityFlags

Unpacks bit-packed Sentinel 3 OLCI Quality Flags values.

### Parameters

-   `value` **integer** QUALITY_FLAGS band DN value (32-bit value)

Returns
**[object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object){target="_blank"}**
An object containing the following keys with either 0 or 1 values: land,
coastline, fresh_inland_water, tidal_region, bright, straylight_risk,
invalid, cosmetic, duplicated, sun_glint_risk, dubious, saturatedBxy
(where xy is the band number, e.g. saturatedB01).
