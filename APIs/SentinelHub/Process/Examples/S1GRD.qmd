---
title: Examples for S1GRD
---

The requests below are written in python. To execute them you need to
create an OAuth client as is explained
[here](/APIs/SentinelHub/Overview/Authentication.qmd#python). It is
named `oauth` in these examples.

### S1GRD orthorectified linear gamma0 VV between 0 and 0.5 (png) {#s1grd-orthorectified-linear-gamma0-vv-between-0-and-05-png}

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VV"],
    output: { id: "default", bands: 1 },
  }
}

function evaluatePixel(samples) {
  return [2 * samples.VV]
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                1360000,
                5121900,
                1370000,
                5131900,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/3857"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "timeRange": {
                        "from": "2019-02-02T00:00:00Z",
                        "to": "2019-04-02T23:59:59Z",
                    }
                },
                "processing": {"orthorectify": "true"},
            }
        ],
    },
    "output": {
        "width": 512,
        "height": 512,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/png"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

### S1GRD orthorectified linear gamma0 VV between 0 and 0.5 in approximate real-world 10 m resolution (IW) (png) {#s1grd-orthorectified-linear-gamma0-vv-between-0-and-05-in-approximate-real-world-10-m-resolution-iw-png}

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VV"],
    output: { id: "default", bands: 1 },
  }
}

function evaluatePixel(samples) {
  return [2 * samples.VV]
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                268574.43,
                4624494.84,
                276045.41,
                4631696.16,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/32633"},
        },
        "data": [
            {
                "dataFilter": {
                    "timeRange": {
                        "from": "2019-02-02T00:00:00Z",
                        "to": "2019-04-02T23:59:59Z",
                    },
                    "resolution": "HIGH",
                    "acquisitionMode": "IW",
                },
                "processing": {
                    "orthorectify": "true",
                    "demInstance": "COPERNICUS_30",
                },
                "type": "sentinel-1-grd",
            }
        ],
    },
    "output": {
        "resx": 10,
        "resy": 10,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/png"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

### S1GRD orthorectified with Copernicus DEM 30 (png)

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VV"],
    output: { id: "default", bands: 1 },
  }
}

function evaluatePixel(samples) {
  return [2 * samples.VV]
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                1360000,
                5121900,
                1370000,
                5131900,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/3857"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "timeRange": {
                        "from": "2019-02-02T00:00:00Z",
                        "to": "2019-04-02T23:59:59Z",
                    }
                },
                "processing": {
                    "orthorectify": "true",
                    "demInstance": "COPERNICUS_30",
                },
            }
        ],
    },
    "output": {
        "width": 512,
        "height": 512,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/png"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

### S1GRD orthorectified linear gamma0 VV, ascending orbit direction, GeoTIFF in EPSG:32648 (UTM zone 48N)

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VV"],
    output: { id: "default", bands: 1, sampleType: SampleType.FLOAT32 },
  }
}

function evaluatePixel(samples) {
  return [samples.VV]
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                699800,
                1190220,
                709800,
                1200220,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/32648"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "timeRange": {
                        "from": "2017-11-15T00:00:00Z",
                        "to": "2017-11-15T23:00:00Z",
                    },
                    "acquisitionMode": "IW",
                    "polarization": "DV",
                    "orbitDirection ": "ASCENDING",
                },
                "processing": {
                    "backCoeff": "GAMMA0_ELLIPSOID",
                    "orthorectify": "true",
                },
            }
        ],
    },
    "output": {
        "width": 1000,
        "height": 1000,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/tiff"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request, headers={"Accept": "image/tiff"})
```

### S1GRD orthorectified decibel gamma0 VH between -20 dB and 0 dB (png)

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VH"],
    output: { id: "default", bands: 1 },
  }
}

function evaluatePixel(samples) {
  return [toDb(samples.VH)]
}

// visualizes decibels from -20 to 0

function toDb(linear) {
  // the following commented out lines are simplified below
  // var log = 10 * Math.log(linear) / Math.LN10
  // var val = Math.max(0, (log + 20) / 20)
  return Math.max(0, Math.log(linear) * 0.21714724095 + 1)
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                1360000,
                5121900,
                1370000,
                5131900,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/3857"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "timeRange": {
                        "from": "2019-02-02T00:00:00Z",
                        "to": "2019-04-02T23:59:59Z",
                    }
                },
                "processing": {"orthorectify": "true"},
            }
        ],
    },
    "output": {
        "width": 512,
        "height": 512,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/png"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

### S1GRD orthorectified decibel gamma0 RGB composite of VV, VH, VV/VH/10 between -20 dB and 0 dB (png)

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VV", "VH"],
    output: { id: "default", bands: 3 },
  }
}

function evaluatePixel(samples) {
  var vvdB = toDb(samples.VV)
  var vhdB = toDb(samples.VH)
  return [vvdB, vhdB, vvdB / vhdB / 10]
}

// displays VV in decibels from -20 to 0

function toDb(linear) {
  // the following commented out lines are simplified below
  // var log = 10 * Math.log(linear) / Math.LN10
  // var val = Math.max(0, (log + 20) / 20)
  return Math.max(0, Math.log(linear) * 0.21714724095 + 1)
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                1360000,
                5121900,
                1370000,
                5131900,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/3857"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "timeRange": {
                        "from": "2019-02-02T00:00:00Z",
                        "to": "2019-04-02T23:59:59Z",
                    }
                },
                "processing": {"orthorectify": "true"},
            }
        ],
    },
    "output": {
        "width": 512,
        "height": 512,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/png"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

### S1GRD non-orthorectified linear sigma0 VH between 0 and 0.5 (png) {#s1grd-non-orthorectified-linear-sigma0-vh-between-0-and-05-png}

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VH"],
    output: { id: "default", bands: 1 },
  }
}

function evaluatePixel(samples) {
  return [2 * samples.VH]
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                1360000,
                5121900,
                1370000,
                5131900,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/3857"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "timeRange": {
                        "from": "2019-02-02T00:00:00Z",
                        "to": "2019-04-02T23:59:59Z",
                    }
                },
                "processing": {
                    "orthorectify": "false",
                    "backCoeff": "SIGMA0_ELLIPSOID",
                },
            }
        ],
    },
    "output": {
        "width": 512,
        "height": 512,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/png"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

### S1GRD non-orthorectified Lee speckle filtered decibel gamma0 HH between -20 dB and +10 dB (png)

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["HH"],
    output: { id: "default", bands: 1 },
  }
}

function evaluatePixel(samples) {
  return [toDb(samples.HH)]
}

// visualizes decibels from -20 to +10

function toDb(linear) {
  var log = (10 * Math.log(linear)) / Math.LN10
  return Math.max(0, (log + 20) / 30)
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                18400000,
                -11330000,
                18500000,
                -11430000,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/3857"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "acquisitionMode": "EW",
                    "timeRange": {
                        "from": "2020-09-29T00:00:00Z",
                        "to": "2020-09-29T23:59:59Z",
                    },
                },
                "processing": {
                    "orthorectify": "false",
                    "backCoeff": "GAMMA0_ELLIPSOID",
                    "speckleFilter": {
                        "type": "LEE",
                        "windowSizeX": 5,
                        "windowSizeY": 5,
                    },
                },
            }
        ],
    },
    "output": {
        "width": 1000,
        "height": 1000,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/png"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

### S1GRD orthorectified gamma0 two month temporal averaged decibel VV between -20 dB and 0 dB (png)

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VV", "dataMask"],
    output: { id: "default", bands: 1 },
    mosaicking: Mosaicking.ORBIT,
  }
}

function evaluatePixel(samples) {
  return [calculateAverage(samples)]
}

function calculateAverage(samples) {
  var sum = 0
  var nValid = 0
  for (let sample of samples) {
    if (sample.dataMask != 0) {
      nValid++
      sum += toDb(sample.VV)
    }
  }
  return sum / nValid
}

// visualizes decibels from -20 to 0

function toDb(linear) {
  // the following commented out lines are simplified below
  // var log = 10 * Math.log(linear) / Math.LN10
  // var val = Math.max(0, (log + 20) / 20)
  return Math.max(0, Math.log(linear) * 0.21714724095 + 1)
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                1360000,
                5121900,
                1370000,
                5131900,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/3857"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "timeRange": {
                        "from": "2019-02-01T00:00:00Z",
                        "to": "2019-04-02T23:59:59Z",
                    },
                    "orbitDirection": "ASCENDING",
                },
                "processing": {"orthorectify": "true"},
            }
        ],
    },
    "output": {
        "width": 512,
        "height": 512,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/png"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

### S1GRD radiometrically terrain corrected linear gamma0 VV between 0 and 0.5 (png) {#s1grd-radiometrically-terrain-corrected-linear-gamma0-vv-between-0-and-05-png}

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VV"],
    output: { id: "default", bands: 1 },
  }
}

function evaluatePixel(samples) {
  return [2 * samples.VV]
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                1095431,
                5714610,
                1146158,
                5754129,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/3857"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "timeRange": {
                        "from": "2019-02-02T00:00:00Z",
                        "to": "2019-04-02T23:59:59Z",
                    }
                },
                "processing": {
                    "orthorectify": "true",
                    "backCoeff": "GAMMA0_TERRAIN",
                },
            }
        ],
    },
    "output": {
        "width": 512,
        "height": 512,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/png"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

### S1GRD radiometrically terrain corrected using Copernicus DEM 30 (png)

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VV"],
    output: { id: "default", bands: 1 },
  }
}

function evaluatePixel(samples) {
  return [2 * samples.VV]
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                1095431,
                5714610,
                1146158,
                5754129,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/3857"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "timeRange": {
                        "from": "2019-02-02T00:00:00Z",
                        "to": "2019-04-02T23:59:59Z",
                    }
                },
                "processing": {
                    "orthorectify": "true",
                    "backCoeff": "GAMMA0_TERRAIN",
                    "demInstance": "COPERNICUS_30",
                },
            }
        ],
    },
    "output": {
        "width": 512,
        "height": 512,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/png"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

### S1GRD radiometrically terrain corrected with custom DEM oversampling of 3 (png)

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VV"],
    output: { id: "default", bands: 1 },
  }
}

function evaluatePixel(samples) {
  return [2 * samples.VV]
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                1095431,
                5714610,
                1146158,
                5754129,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/3857"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "timeRange": {
                        "from": "2019-02-02T00:00:00Z",
                        "to": "2019-04-02T23:59:59Z",
                    }
                },
                "processing": {
                    "orthorectify": "true",
                    "backCoeff": "GAMMA0_TERRAIN",
                    "radiometricTerrainOversampling": 3,
                },
            }
        ],
    },
    "output": {
        "width": 512,
        "height": 512,
        "responses": [
            {
                "identifier": "default",
                "format": {"type": "image/png"},
            }
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request)
```

### S1GRD radiometrically terrain corrected gamma0 VV and auxiliary data: local incidence angle, scattering area, and shadow mask

``` python
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["VV", "localIncidenceAngle", "scatteringArea", "shadowMask"],
    output: [
      { id: "s1_rtc_VV_area", bands: 2, sampleType: "FLOAT32" },
      { id: "s1_rtc_angle_mask", bands: 2, sampleType: "UINT8" },
    ],
  }
}

function evaluatePixel(samples) {
  return {
    s1_rtc_VV_area: [samples.VV, samples.scatteringArea],
    s1_rtc_angle_mask: [samples.localIncidenceAngle, samples.shadowMask],
  }
}
"""

request = {
    "input": {
        "bounds": {
            "bbox": [
                565556.94,
                5048644.47,
                600656.56,
                5076658.33,
            ],
            "properties": {"crs": "http://www.opengis.net/def/crs/EPSG/0/32632"},
        },
        "data": [
            {
                "type": "sentinel-1-grd",
                "dataFilter": {
                    "timeRange": {
                        "from": "2019-02-02T00:00:00Z",
                        "to": "2019-04-02T23:59:59Z",
                    }
                },
                "processing": {
                    "orthorectify": "true",
                    "backCoeff": "GAMMA0_TERRAIN",
                },
            }
        ],
    },
    "output": {
        "width": 1024,
        "height": 796,
        "responses": [
            {
                "identifier": "s1_rtc_VV_area",
                "format": {"type": "image/tiff"},
            },
            {
                "identifier": "s1_rtc_angle_mask",
                "format": {"type": "image/tiff"},
            },
        ],
    },
    "evalscript": evalscript,
}

url = "https://sh.dataspace.copernicus.eu/api/v1/process"
response = oauth.post(url, json=request, headers={"Accept": "application/tar"})
```
