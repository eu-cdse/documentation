---
resources:
- AsyncProcess/resources/python/cdse_set_bucket_policy.py
title: Asynchronous Processing API
---

**Asynchronous Processing API is currently in beta release.**

Asynchronous Processing API (or shortly \"Async API\") allows you to
process more data with a single request than Processing API. This is
possible because the processing results are not returned immediately but
are - after some time - delivered in your object storage. We recommend
using Async API when you want to process bigger images, when you do not
want to deal with tiled results and when it is not crucial for you to
get the processing results immediately.

## General approach

The Async API allows you to process the data in a similar way as
Processing API; you define input data, area of interest and time range
in the body of an Async API request and Sentinel Hub will process the
data as defined in your evalscript. When using Async API keep in mind
that:

-   The maximum output image size can not exceed 10000 pixels in any
    dimension.
-   Evalscript can be either sent directly in the request or it can be
    stored in object storage and referenced in an async request ( see
    parameter evalscriptReference in Async API reference for more
    details). This allows you to use bigger evalscripts.
-   The processing is asynchronous, which means that you do not get
    results in a response of your request. Instead they are delivered in
    your object storage.
-   A copy of your Async API request is also stored in your object
    storage. After the request is processed, the copy is updated and
    additional information about the cost of the request is added.
-   Only a limited number of async requests can run concurrently for
    each Sentinel Hub user. The exact limit depends on the account type.
-   The processing time depends on request size and on the current and
    past load of the service. Generally, the first request is the
    slowest while the subsequent requests run faster.
-   The cost is the same as with Process API, except that the minimal
    cost is 10 PU per request.

## Bucket access

The Async API uses buckets to:

-   read evalscript from a bucket (this is optional because an
    evalscript can also be provided directly in a request),
-   write results of processing to a bucket.

One bucket or different buckets can be used for these purposes.

## Bucket settings

If you do not yet have a bucket at Copernicus Data Space Ecosystem,
please follow [these
steps](https://creodias.docs.cloudferro.com/en/latest/s3/Create-S3-bucket-and-use-it-in-Sentinel-Hub-requests.html){target="_blank"}
to get one.

You will have to configure your bucket to allow read access to Sentinel
Hub. To do this, [update your bucket
policy](https://creodias.docs.cloudferro.com/en/latest/s3/Bucket-sharing-using-s3-bucket-policy-on-Creodias.html#setting-a-policy-on-the-bucket){target="_blank"}
to include the following statement (don't forget to replace
`<bucket_name>` with your actual bucket name):

``` default
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Sentinel Hub permissions",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::ddf4c98b5e6647f0a246f0624c8341d9:root"
            },
            "Action": [
                "s3:GetBucketLocation",
                "s3:ListBucket",
                "s3:GetObject"
            ],
            "Resource": [
                "arn:aws:s3:::<bucket_name>",
                "arn:aws:s3:::<bucket_name>/*"
            ]
        }
    ]
}
```

A python script to set a bucket policy can be downloaded
[here](/APIs/SentinelHub/AsyncProcess/resources/python/cdse_set_bucket_policy.py).

## Checking the status of the request

While the request is running, you can get its status (see this
[example](/APIs/SentinelHub/AsyncProcess/Examples.qmd#get-information-about-your-asynchronous-processing-request)).
Once the processing is finished the request is deleted from our system.
If you try to check its status after it has been deleted, you will get a
\'404 Not Found\' response even if the request was processed
successfully.

## Troubleshooting

In case anything goes wrong when creating an Async request, we will
return an error message immediately. If anything goes wrong once the
Async request has been created, we will deliver an \"error.json\" file
with an error message to your object storage.

## Examples

[Example of a Async API
request](/APIs/SentinelHub/AsyncProcess/Examples.qmd)
