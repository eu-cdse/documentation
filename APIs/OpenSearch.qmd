---
title: "OpenSearch Catalog web service"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
#| echo: false
#import packages
import requests
import pandas as pd
import xml.etree.ElementTree as ET
```

The OpenSearch catalogue allows you to search through Copernicus data using a standardized web service. The [OpenSearch specification](https://github.com/dewitt/opensearch/blob/master/opensearch-1-1-draft-6.md){target="_blank"} can be consulted for technical details of the standard. This web service returns results as GeoJSON feature collections. Each feature in the collection represents an earth observation 'product', referencing where the actual data can be found.

We remark that this version does not implement the OGC OpenSearch standards, and a migration from other API's named OpenSearch may require significant modifications. It mainly offers compatibility for existing users of a similar API on the CreoDIAS and Wekeo platforms and with client-side tools and workflows that have implemented support for this API. For new users looking for a more standardized API, a [STAC](https://stacspec.org){target="_blank"} alternative is being developed.

## Using OpenSearch interface to query Data Catalogue

Due to the fact that offset is not a recommended form of searching repository pages, we had to implement a limit to a maximum of 200k. The requests over the limit will be rejected with the code 400.
Therefore, we encourage you to limit your inquiries by geographic or temporal area.

All queries may be executed as simple HTTP-Get calls by typing the query in the web browser address line, by using any HTTP client, e.g. curl or wget, or from inside of the users' program. The database is accessible free and anonymously (open for anonymous access for everyone, no authorization is used). It may be accessed both from the internal network (virtual machines in Creodias) and from outside, e.g. your home computer. Note that the actual EO data are restricted to authorized users; only the Data Catalogue is open.

### General Rules

The queries produce results in JSON format. Base url:

::: {.panel-tabset}

# HTTP Request
[http://catalogue.dataspace.copernicus.eu/resto/api/collections/search.json?](http://catalogue.dataspace.copernicus.eu/resto/api/collections/search.json?){target="_blank"}


# Python
```{python}
json = requests.get("http://catalogue.dataspace.copernicus.eu/resto/api/collections/search.json?").json()
pd.DataFrame.from_dict(json['features']).head(3)
```

:::

::: {.callout-note} 

Most queries are case-sensitive.

:::

### Collections

The data are organized in so-called collections corresponding to various satellites. A query may search for data in all collections or in one particular collection only. If only one satellite is in the field of interest, the second approach is faster and more efficient than filtering the general query. For example, to find the ten most recent Sentinel-2 products with cloud cover below 10%, the query should look like:

::: {.panel-tabset}

# CLI
```{bash}
$ wget -O - "http://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?cloudCover=[0,10]&startDate=2022-06-11T00:00:00Z&completionDate=2022-06-22T23:59:59Z&maxRecords=10"
```
:::

while if the collection field is missing in the URL, the products from all the satellites are returned:

::: {.panel-tabset}

# CLI
```{bash}
$ wget -O - "https://catalogue.dataspace.copernicus.eu/resto/api/collections/search.json?cloudCover=[0,10]&startDate=2022-06-11T00:00:00Z&completionDate=2022-06-22T23:59:59Z&maxRecords=10"
```
:::

As for today the following collections are defined and may be used:

* **Sentinel1 or SENTINEL-1**

* **Sentinel2 or SENTINEL-2**

* **Sentinel3 or SENTINEL-3**

* **Sentinel5P or SENTINEL-5P**

::: {.callout-note} 

Note, that collection names vary a bit from satellite names, as they are used in EO Data repository. For example, the collection is named **Sentinel2,** while in the repository its data are located within **/eodata/Sentinel-2/....** branch of the repository tree.

:::

### Output sorting and limiting

By default, maximum of 20 products are returned. You may change the limit (beware of long execution time for queries about thousands of products) using the phrase:  


::: {style="margin-left:20px"}

**maxRecords=nnn**

:::

If the query is very general and the number of matching products is large, the next pages of products can be retrieved using:

::: {style="margin-left:20px"}

**page=nnn**

:::

It is also possible to alter the sequence in which the products are displayed by using a phrase similar to:

::: {style="margin-left:20px"}

**sortParam=startDate**

:::

This will sort the output by observation date. The following orderings can be implemented:

::: {style="margin-left:20px"}

**startDate** - the date when the observation was made (start)

**completionDate** - the date when the observation was made (end)

**published** - the date when the product got published in our repository

:::

Eeach of these ordering can be be accompanied by:

::: {style="margin-left:20px"}

**sortOrder=ascending or sortOrder=descending**

:::

For example the query

::: {.panel-tabset}

# HTTP Request
[http://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?startDate=2021-07-01T00:00:00Z&completionDate=2021-07-31T23:59:59Z&sortParam=startDate&maxRecords=20](http://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?startDate=2021-07-01T00:00:00Z&completionDate=2021-07-31T23:59:59Z&sortParam=cloudCover&maxRecords=20){target="_blank"}


# Python
```{python}
json = requests.get("http://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?startDate=2021-07-01T00:00:00Z&completionDate=2021-07-31T23:59:59Z&sortParam=startDate&maxRecords=20").json()
pd.DataFrame.from_dict(json['features']).head(3)
```

:::

The above request will return 20 products from July 2021, whereas the next query will return the next 20:

::: {.panel-tabset}

# HTTP Request
[http://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?startDate=2021-07-01T00:00:00Z&completionDate=2021-07-31T23:59:59Z&sortParam=startDate&maxRecords=20&page=2](http://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?startDate=2021-07-01T00:00:00Z&completionDate=2021-07-31T23:59:59Z&sortParam=startDate&maxRecords=20&page=2){target="_blank"}

# Python
```{python}
json = requests.get("http://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?startDate=2021-07-01T00:00:00Z&completionDate=2021-07-31T23:59:59Z&sortParam=startDate&maxRecords=20&page=2").json()
pd.DataFrame.from_dict(json['features']).head(3)
```

:::

### Formal queries

The formal query is invoked as a sequence of sub phrases, separated by &. The result is a conjunction of all sub phrases. It is impossible to use an alternative in the question. The query must be specified as a formal query.

The example of formal query - about cloudless (cloud cover lower or equal to 10%) products for a specific location:

::: {.panel-tabset}

# HTTP Request
[https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?cloudCover=[0,10]&startDate=2021-06-21T00:00:00Z&completionDate=2021-09-22T23:59:59Z&lon=21.01&lat=52.22](https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?cloudCover=%5B0,10%5D&startDate=2021-06-21T00:00:00Z&completionDate=2021-09-22T23:59:59Z&lon=21.01&lat=52.22){target="_blank"}


# Python
```{python}
json = requests.get("https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?cloudCover=[0,10]&startDate=2021-06-21T00:00:00Z&completionDate=2021-09-22T23:59:59Z&lon=21.01&lat=52.22").json()
pd.DataFrame.from_dict(json['features']).head(3)
```

:::

The queries are in form **param=value or param=[minvalue,maxvalue]**. Most of the parameters are common for all collections, but some are specific for some them (e.g. **cloudCover** applies to optical satellites, but polarisation applies to radar ones), or just single one.

### Geography and time-frame

The common set of parameters are:

::: {style="margin-left:20px"}

**startDate, completionDate** - the date limits of the observation. The time may also be specified, e.g. 2021-10-01T21:37:00Z

**publishedAfter, publishedBefore** - the date limits when the product was published in our repository

**lon, lat** - geographical position, expressed in military style (EPSG:4326, as decimal fraction of degrees, positive for eastern latitude and northern longitude)
**radius** - region of interest, defined as a circle with centre in point determined by the longitude and latitude with radius expressed in meters (it won't work with point manually selected in EOFinder/Data Explorer)

**geometry** - region of interest, defined as WKT string (POINT, POLYGON, etc.)

**box** - region of interest, defined as the rectangle with given (west,south,east,north) values. It should be defined this way: &box=west,south,east,north

:::

For example the query can be:

::: {.panel-tabset}

# HTTP Request
[https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?productType=S2MSI1C&cloudCover=[0,10]&startDate=2022-06-11T00:00:00Z&completionDate=2022-06-22T23:59:59Z&maxRecords=10&box=4,51,4.5,52](https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?productType=S2MSI1C&cloudCover=[0,10]&startDate=2022-06-11T00:00:00Z&completionDate=2022-06-22T23:59:59Z&maxRecords=10&box=4,51,4.5,52){target="_blank"}


# Python
```{python}
json = requests.get("https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?productType=S2MSI1C&cloudCover=[0,10]&startDate=2022-06-11T00:00:00Z&completionDate=2022-06-22T23:59:59Z&maxRecords=10&box=4,51,4.5,52").json()
pd.DataFrame.from_dict(json['features']).head(3)
```

:::

or

::: {.panel-tabset}

# HTTP Request

[https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?cloudCover=[0,10]&startDate=2022-06-11T00:00:00Z&completionDate=2022-06-22T23:59:59Z&maxRecords=10&box=-21,23,-24,15](https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?cloudCover=[0,10]&startDate=2022-06-11T00:00:00Z&completionDate=2022-06-22T23:59:59Z&maxRecords=10&box=-21,23,-24,15){target="_blank"}


# Python
```{python}
json = requests.get("https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?cloudCover=[0,10]&startDate=2022-06-11T00:00:00Z&completionDate=2022-06-22T23:59:59Z&maxRecords=10&box=-21,23,-24,15").json()
pd.DataFrame.from_dict(json['features']).head(3)
```


:::

### Volatile features

Some terrain-like feature masks are not permanent but describing a single scene only. The most commonly used such feature is cloudiness, or cloudCover, which is defined for most of the products coming from optical sensors. For example:

::: {style="margin-left:20px"}

**cloudCover=[0,10]**

:::

This parameter selects only those scenes, which are covered by clouds by no more than 10%.

::: {.callout-caution}

## Caution 

To be meaningful, the cloudiness must be provided with each product, while in many products is missing. If the cloudiness is unknown for the scene, it is marked by a value of 0 or -1. cloudCover=0 is therefore ambiguous: it may either mean totally cloudless sky or the cloudy scene for which cloud cover had not been estimated during original data processing.

:::

### Satellite features

::: {style="margin-left:20px"}

**instrument** - meaningful only for satellites equipped with multiple instruments. The possible values are satellite specific.

**productType** - the actual types possible are specific for every satellite.

**sensorMode** - also satellite and sensor specific. E.g. (for Sentinel-1): sensorMode=EW

**orbitDirection** - ASCENDING or DESCENDING. For most heliosynchronous satellites descending orbits means the day scenes, while ascending means night ones. For many optical satellites (e.g. Sentinel-2) only day scenes are published.

**resolution** - expected spatial resolution of the product defined in meters.

**status:**

:::

::: {style="margin-left:40px"}

- **ONLINE**
- **OFFLINE**

:::

Some additional parameters are strictly satellite-specific, e.g. polarisation, which is defined only for Sentinel-1.

For every satellite (collection) its set of query-able parameters may be obtained by a query like:

::: {.panel-tabset}

# HTTP Request

[https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel1/describe.xml](https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel1/describe.xml){target="_blank"}


# Python

```{python}
url = 'https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel1/describe.xml'
response = requests.get(url)

root = ET.fromstring(response.content)

for child in root:
    if child.tag.endswith('ShortName') or child.tag.endswith('Description'):
        print(f"{child.tag}: {child.text}")
```

:::

The resulting XML file provides full list of the parameters for the collection, with their very brief descriptions.


