---
title: "openEO"
format:
  html:
    code-fold: true
jupyter: python3
---

## Overview

<div style="display: flex; align-items: center;"><p style="flex: 1; text-align: justify;"><a href="https://openeo.org">openEO</a> represents an innovative community standard that revolutionizes geospatial data processing and analysis. This groundbreaking framework provides a novel approach to accessing, processing, and analyzing diverse Earth observation data. By adopting openEO, developers, researchers, and data scientists gain access to a unified and interoperable platform, empowering them to harness distributed computing environments and leverage cloud-based resources for addressing complex geospatial challenges.</p><a href="https://openeo.org" target="_blank" style="margin-left: 40px;"><img src="_images/openEO_logo.png" alt="Logo" style="height: 50%; max-height: 100px;"></a></div>



With openEO's collaborative nature, users can seamlessly share code, workflows, and data processing methods across platforms and tools, fostering collaboration and advancing the accessibility, scalability, and reproducibility of Earth observation data. Additionally, openEO provides intuitive programming libraries that enable easy analysis of diverse Earth observation datasets. These libraries facilitate efficient access and processing of large-scale data across multiple infrastructures, supporting various applications, including exploratory research, detailed mapping, and information extraction from Earth observation. Moreover, this streamlined approach enhances the development process, enabling the utilization of Earth observation data for a wide range of applications and services.


## Added-value of openEO API

The key benefits of using openEO API can be summarized as follows:

* Unified and straightforward access to multiple Earth observation datasets.
* Scalable and efficient processing capabilities.
* A standardized system that works across different platforms.
* Independence from underlying technologies and software libraries.
* Reproducibility through transparent workflows, supporting principles of FAIR (Findable, Accessible, Interoperable, and Reusable) and Open Science.

When using the openEO API, users can choose [JavaScript](JavaScript_Client/JavaScript.qmd), [Python](Python_Client/Python.qmd), or [R](R_Client/R.qmd) as their client library. This allows them to work with any back-end and compare them based on capacity, cost, and result quality.

Nevertheless, if you are not familiar with programming, you could start using the [web-based editor for openEO](#). It supports visual modelling of your algorithms and simplified JavaScript-based access to the openEO workflows and providers. An overview of the openEO web-editor is available in the [Application](https://documentation.dataspace.copernicus.eu/Applications.html) section of this documentation. 

## Datacubes

In openEO, a datacube is a fundamental concept and a key component of the platform. Data is represented as datacubes in openEO, which are multi-dimensional arrays with additional information about their dimensionality. Datacubes can provide a nice and tidy interface for spatiotemporal data as well as for the operations you may want to execute on them. An in-depth introduction to datacubes and processing them with openEO can be found [here](https://openeo.org/documentation/1.0/datacubes.html){target='_blank'}

## Support

Unable to locate your preferred programming language? Or you don't find functionalities that you want to use. Then you have the option to report issues or feedbacks via the to be CDSE forum or also please feel free to [create a ticket](https://helpcenter.dataspace.copernicus.eu/hc/en-gb/requests/new){target='_blank'} or actively propose API changes through Pull Requests.


## Free tier limitations

The following limitations need to be taken into account:

* Synchronous requests are limited to 2 concurrent requests
* Batch jobs are limited to 2 concurrent jobs

These limits are in place to avoid that individual users can overload the service, please contact support if they are problematic for your use case.


```{python}
#| echo: false
#| output: false
import openeo
connection = openeo.connect("openeo.dataspace.copernicus.eu")

```

## Collections

```{python}
#| echo: false
#| output: true
connection.list_collections()
```

## File formats

```{python}
#| echo: false
connection.list_file_formats()
```

## Processes

```{python}
#| echo: false
connection.list_processes()
```