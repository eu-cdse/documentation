---
title: "Authentication With Client Credentials in openEO"
execute:
  enabled: false
---


OpenID Connect provides the so-called "*client credentials flow*",
which is a *non-interactive* flow, based on a static client ID and a client secret,
making it suitable for machine-to-machine authentication.
Often, this is also referred to as "*service account*" authentication.

The openEO Python client library has built-in support
for service accounts and the client credentials flow,
with the [`authenticate_oidc_client_credentials()` method](https://open-eo.github.io/openeo-python-client/auth.html#oidc-authentication-client-credentials-flow){target="_blank"}
as follows:

```python
connection.authenticate_oidc_client_credentials(
    client_id=...,
    client_secret=...,  # Note: Do not hardcode the secret here!
)
```


::: {.callout-warning}
The use of service accounts and client credentials in openEO is an experimental feature.
It is not widely supported across openEO backends,
and the setup procedure is not yet fully standardized or streamlined.
:::


## Caveats And Considerations

-   Treat the client secret securely, like a password.
    Take extra care to not leak it accidentally.
    For example, given the simplicity of the `authenticate_oidc_client_credentials()` example snippet above,
    it might be tempting to hard-code the client secret in scripts or notebooks,
    potentially leading to its permanent storage in version control repositories.

    Instead, read the client secret from a secure location
    (e.g. a private file outside the reach of the version control repositories),
    or leverage environment variables (e.g as directly [supported by the openEO Python client library](https://open-eo.github.io/openeo-python-client/auth.html#oidc-client-credentials-using-environment-variables){target="_blank"}).
-   The client credentials only identify an OAuth *client* or *service account*,
    not a personal *user* account.

    -   This means that openEO resources such as openEO batch jobs, their results, UDP's, etc
        from one identity are not available to the other.
        For example, batch jobs originally created with a service account
        cannot be listed when using a personal account.
    -   Likewise, the balances of processing credits are separate.
        However, it is possible to link the balance of the service account to a personal account.
        To enable this, contact support and provide the client ID and user ID.

-   The client credentials flow is not supported on the
    [Copernicus Data Space Ecosystem openEO web editor](https://openeo.dataspace.copernicus.eu/).
    As mentioned above,
    this practically means that it can not be used to track the progress and
    status of batch jobs created with a service account.
    However, it is still possible to approximate the batch job overview of the web editor
    with a Jupyter Notebook using the openEO Python client library.


## How To Create Service Accounts And Obtain Client Credentials

There are several options to create or request a service account with client credentials.
Which one to choose depends on the particular use case.
For simple, personal use cases and initial testing,
the self-service feature of the Sentinel Hub Dashboard is the easiest option.
For larger use cases or projects that should not be tied to a single developer,
it is recommended to request a client through the CDSE Account management service.

### Obtain Client Credentials With The Sentinel Hub Dashboard

The Sentinel Hub service in the Copernicus Data Space Ecosystem
has a [dashboard web app](https://shapps.dataspace.copernicus.eu/dashboard),
which includes a self-service feature to register personal OAuth clients.
Find more detailed instructions in the
[documentation on Sentinel Hub Authentication](../../SentinelHub/Overview/Authentication.qmd#registering-oauth-client){target="_blank"}.

The client ID and client secret obtained with this dashboard can also be used
for the client credentials flow with the openEO service of Copernicus Data Space Ecosystem.


###  Request A Service Account From The CDSE Account Management Service

The [account management service in the Copernicus Data Space Ecosystem](https://identity.dataspace.copernicus.eu/auth/realms/CDSE/account){target="_blank"}
(managed by [CloudFerro](https://cloudferro.com/){target="_blank"})
supports the creation of OIDC/OAuth clients (e.g. service accounts based on the client credentials grant)
through CloudFerro's JIRA ticketing system.


::: {.callout-warning}

Creating a such a ticket requires a valid user account on the CloudFerro JIRA system,
which is currently not covered by this documentation.
Contact the [CDSE support team](https://helpcenter.dataspace.copernicus.eu/)
for more information.

:::


Follow these steps
to request the creation of an OIDC/OAuth client (with client credentials support)
for a given use case or project:

0.  Before beginning, collect the following:

    - A short, but descriptive *project name*.
      It can be a couple of words or a project acronym,
      but it should be descriptive enough to be unique
      within the Copernicus Data Space Ecosystem.
    - A short description of the project,
      preferably with some pointers to the project website,
      contact info, involved parties, ...

    In the following, `$ProjectName$` will be used as placeholder of the project name

1.  [Log in on CloudFerro JIRA](https://jira.cloudferro.com/login.jsp)
2.  [Start creating a JIRA ticket](https://jira.cloudferro.com/secure/CreateIssue!default.jspa){target="_blank"}
    as follows:

    - Project: select "CDSE Operations (CDSE)"
    - Issue Type: select "New KC client"
    - Click the "Next" button

![JIRA ticket creation: select issue type](_images/cf-new-kc-client-01.png)

3.  Fill in these client details:

    - Summary: "OIDC Client for `$ProjectName$`"
    - Client ID: this must be a unique identifier
      and it is recommended to start with prefix `sh-`.
      For example, use the following Python snippet to generate such a identifier:

      ```python
      import uuid
      print(f"sh-{uuid.uuid4()}")
      ```

    - Name: "Service Account for `$ProjectName$`".
    - Description: put the project description here.
    - Client authentication: select "On"
    - Authentication flow:
      enable "Service Accounts Role" to enable the "Client Credentials Grant" on the client.
    - All other options can be left empty/default as-is.
    - Click the "Create" button at the bottom.

![JIRA ticket creation: client details](_images/cf-new-kc-client-02.png)

4. After submitting this JIRA ticket:
   allow the CloudFerro team some time to review and address the client creation request.


## Obtain The OIDC Identifier Of A Service Account

The setup of the service account with client credentials, as discussed above,
is a matter between the user creating (or requesting) the service account
and the CDSE Account Management Service.
Other services like an openEO backend have no direct involvement in this process
nor insights into how service accounts are linked
to personal accounts or higher level projects.

When you are in the process of linking a service account to another entity,
for example for openEO credit accounting purposes,
you will be required to provide the "OIDC subject identifier" (the OIDC "sub" claim)
associated with the service account.
Note that this is different from the client ID of the service account.

This "sub" claim can be obtained for example with the following Python code snippet,
using the openEO Python client library:

```python
import getpass
import openeo

connection = openeo.connect(url="openeo.dataspace.copernicus.eu")

client_id = getpass.getpass("Client ID: ")
client_secret = getpass.getpass("Client secret: ")
connection.authenticate_oidc_client_credentials(
    client_id=client_id,
    client_secret=client_secret,
)

client_sub_id = con.describe_account()["user_id"]
print(client_sub_id)
```

::: {.callout-important}

To avoid the bad practice of hardcoding the client secret in scripts or notebooks,
this snippet uses the `getpass` module from Python's standard library
to interactively and securely prompt the user for the client ID and secret,
in a way that is compatible with both standard CLI usage and Jupyter notebook contexts.

:::
