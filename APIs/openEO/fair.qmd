---
title: "FAIR data & open science"
execute:
  echo: false
jupyter: python3
aliases:
  - /fair.html
---

## FAIR

One of the key goals of openEO, is to support [FAIR principles](https://www.go-fair.org/fair-principles/) and open science. The implementation in the Copernicus dataspace
makes it easier to comply with these principles, by incorporating these principles in the implementation, so that
users are automatically a step closer to generating FAIR-compliant open data. If your project has requirements related to these topics,
this should serve as a good starting point.

These are a few examples:

- *[F2 Rich metadata](https://www.go-fair.org/fair-principles/f2-data-described-rich-metadata/)* openEO generates rich STAC metadata,
  that includes processing info, complete raster metadata, band information, etcetera.
- *[R1.2 Detailed provenance](https://www.go-fair.org/fair-principles/r1-2-metadata-associated-detailed-provenance/)* In result metadata [derived-from](https://github.com/radiantearth/stac-spec/blob/master/item-spec/item-spec.md#derived_from)
  links link back to all input products to provide provenance.
- *[R1.3 use of domain relevant (meta)data standard](https://www.go-fair.org/fair-principles/r1-3-metadata-meet-domain-relevant-community-standards/)* openEO generates STAC metadata, so this one is included by default.
  For the data formats, it supports well known options such as Cloud optimized Geotiff, netCDF with CF conventions, GeoParquet, and many more.

This is a concrete example of STAC metadata generated by openEO:

```{python}
metadata= {
"assets": {
"openEO.nc": {
"eo:bands": [
{
"center_wavelength": 0.4924,
"name": "B02"
},
{
"center_wavelength": 0.5598,
"name": "B03"
},
{
"center_wavelength": 0.6646,
"name": "B04"
}
],
"file:nodata": [
-32768
],
"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/my_custom_job/results/assets/MzJjYzdkZGItZjdlMS00YjFjLTk3OTYtZjlmZTM5Y2I4ZmVi/eb3cbffb39820a19588bbff73e25000a/openEO.nc?expires=1709880758",
"proj:bbox": [
534060,
6479360,
797110,
6667130
],
"proj:epsg": 32633,
"proj:shape": [
26305,
18777
],
"raster:bands": [
{
"name": "B02",
"statistics": {
"maximum": 18792,
"mean": 1761.7649320274,
"minimum": -999,
"stddev": 3041.8121307017,
"valid_percent": 66.75
}
},
{
"name": "B03",
"statistics": {
"maximum": 17592,
"mean": 1767.9099226689,
"minimum": -799,
"stddev": 2827.4360730483,
"valid_percent": 66.75
}
},
{
"name": "B04",
"statistics": {
"maximum": 16840,
"mean": 1634.3294499714,
"minimum": -385,
"stddev": 2775.1541115591,
"valid_percent": 66.75
}
}
],
"roles": [
"data"
],
"title": "openEO.nc",
"type": "application/x-netcdf"
}
},
"description": "This is example STAC metadata as generated by the Copernicus Dataspace openEO backend. Description and title is provided by the user.",
"extent": {
"spatial": {
"bbox": [
[
15.611572,
58.453481000000004,
20.093994,
60.042903999999986
]
]
},
"temporal": {
"interval": [
[
"2023-08-01T00:00:00Z",
"2023-08-15T00:00:00Z"
]
]
}
},
"id": "j-2401123752f848e4a1c72a108ef0c4ce",
"license": "proprietary",
"links": [
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/01/S2A_MSIL2A_20230801T100601_N0509_R022_T33VWF_20230801T161353.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/01/S2A_MSIL2A_20230801T100601_N0509_R022_T33VWF_20230801T161353.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/01/S2A_MSIL2A_20230801T100601_N0509_R022_T34VCL_20230801T161353.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/01/S2A_MSIL2A_20230801T100601_N0509_R022_T34VCL_20230801T161353.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/01/S2A_MSIL2A_20230801T100601_N0509_R022_T33VXF_20230801T161353.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/01/S2A_MSIL2A_20230801T100601_N0509_R022_T33VXF_20230801T161353.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/01/S2A_MSIL2A_20230801T100601_N0509_R022_T34VDM_20230801T161353.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/01/S2A_MSIL2A_20230801T100601_N0509_R022_T34VDM_20230801T161353.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T34VDM_20230804T155854.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T34VDM_20230804T155854.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T33VXE_20230804T155854.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T33VXE_20230804T155854.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T34VCM_20230804T155854.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T34VCM_20230804T155854.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T34VCK_20230804T155854.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T34VCK_20230804T155854.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T34VCL_20230804T155854.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T34VCL_20230804T155854.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T33VXG_20230804T155854.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T33VXG_20230804T155854.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T33VWE_20230804T155854.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T33VWE_20230804T155854.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T33VXF_20230804T155854.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/04/S2A_MSIL2A_20230804T101601_N0509_R065_T33VXF_20230804T155854.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/09/S2B_MSIL2A_20230809T101609_N0509_R065_T33VXG_20230809T131713.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/09/S2B_MSIL2A_20230809T101609_N0509_R065_T33VXG_20230809T131713.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/09/S2B_MSIL2A_20230809T101609_N0509_R065_T34VCM_20230809T131713.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/09/S2B_MSIL2A_20230809T101609_N0509_R065_T34VCM_20230809T131713.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/09/S2B_MSIL2A_20230809T101609_N0509_R065_T34VDM_20230809T131713.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/09/S2B_MSIL2A_20230809T101609_N0509_R065_T34VDM_20230809T131713.SAFE",
"type": "application/json"
},
{
"href": "/eodata/Sentinel-2/MSI/L2A/2023/08/11/S2A_MSIL2A_20230811T101031_N0509_R022_T33VWE_20230811T161756.SAFE",
"rel": "derived_from",
"title": "Derived from /eodata/Sentinel-2/MSI/L2A/2023/08/11/S2A_MSIL2A_20230811T101031_N0509_R022_T33VWE_20230811T161756.SAFE",
"type": "application/json"
},
{
"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2401123752f848e4a1c72a108ef0c4ce/results",
"rel": "self",
"type": "application/json"
},
{
"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2401123752f848e4a1c72a108ef0c4ce/results/MzJjYzdkZGItZjdlMS00YjFjLTk3OTYtZjlmZTM5Y2I4ZmVi/c2111d2821edc1de99fc8855a1842821?expires=1709880758",
"rel": "canonical",
"type": "application/json"
},
{
"href": "http://ceos.org/ard/files/PFS/SR/v5.0/CARD4L_Product_Family_Specification_Surface_Reflectance-v5.0.pdf",
"rel": "card4l-document",
"type": "application/pdf"
}
],
"openeo:status": "finished",
"providers": [
{
"description": "This data was processed on an openEO backend maintained by VITO.",
"name": "VITO",
"processing:expression":
{
"expression": {
"loadcollection1": {
"arguments": {
"bands": [
"B02",
"B03",
"B04"
],
"id": "SENTINEL2_L2A",
"properties": {
"eo:cloud_cover": {
"process_graph": {
"lte1": {
"arguments": {
"x": {
"from_parameter": "value"
},
"y": 85
},
"process_id": "lte",
"result": True
}
}
}
},
"spatial_extent": {
"east": 20.093994,
"north": 60.042903999999986,
"south": 58.453481000000004,
"west": 15.611572
},
"temporal_extent": [
"2023-08-01T00:00:00Z",
"2023-08-15T00:00:00Z"
]
},
"process_id": "load_collection"
},
"saveresult1": {
"arguments": {
"data": {
"from_node": "loadcollection1"
},
"format": "netcdf",
"options": {
"format": "netcdf",
"output_format": "netcdf"
}
},
"process_id": "save_result",
"result": True
}
},
"format": "openeo"
},
"processing:facility": "openEO Geotrellis backend",
"processing:software": {
"Geotrellis backend": "0.22.0a1"
},
"roles": [
"processor"
]
}
],
"stac_extensions": [
"https://stac-extensions.github.io/eo/v1.1.0/schema.json",
"https://stac-extensions.github.io/file/v2.1.0/schema.json",
"https://stac-extensions.github.io/processing/v1.1.0/schema.json",
"https://stac-extensions.github.io/projection/v1.1.0/schema.json"
],
"stac_version": "1.0.0",
"summaries": {
"instruments": []
},
"title": "EO product generated by openEO",
"type": "Collection"
}

from openeo.rest.job import JobResults, BatchJob
results = JobResults(BatchJob("my_job_id",connection=None))
results._results = metadata
results
```

## Open Science

With respect to open science, the main benefit of openEO is that your workflows can be stored in a standardized notation, in the
form of openEO 'process graphs'. This gives scientists a novel way of exchanging algorithms, without having to exchange a
complex code base. The key element is that openEO code or process graphs are often a lot easier to understand, because much
of the boilerplate logic is handled by the backend rather than by the user code.

This also has consequences for replicating work: the same process graph can be executed on different backends, or evaluated
against different datasets. This allows to evaluate whether an algorithm is broadly applicable, or only works in a very specific
environment.

A rendering of a very simple process graph that simply extracts Sentinel-2 data is shown below. While the example is simple,
the underlying steps needed to generate an analysis ready datacube from raw Sentinel-2 L2A products are already quite complex,
and most equivalent code will be a lot harder to understand and analyze.

```{python}
import openeo
connection = openeo.connect("openeo.dataspace.copernicus.eu")
graph = metadata["providers"][0]["processing:expression"]["expression"]
connection.datacube_from_flat_graph(graph)
```