---
title: New STAC product catalogue
listing: 
  - id: StacExtensions
    contents:
        - APIs/_images/ndvi.ipynb
        - APIs/_images/query_alps_2ops.ipynb
        - APIs/_images/filter_prague.ipynb
        - APIs/_images/filter_prague_snowcover.ipynb
        - APIs/_images/query_madeira.ipynb
    type: grid
    filter-ui: true
    fields: [image, title]

---



The new prototype of the Copernicus Data Space Ecosystem STAC API was implemented in response to expectations and requirements to create a highly advanced tool that enables more efficient management of Earth observation data. Its goal is to provide a standards-based environment that systematizes structures and schemas through data cataloging. With this beta version, a significant step is being taken towards improving data discoverability and accessibility within the Copernicus Data Space Ecosystem.
The new STAC provides a unify structure to define and catalog spatiotemporal assets. All fields included in Data Space API are consistent with the [STAC Specification](https://stacspec.org/en){target="_blank"}.

The service implements the new STAC API Prototype in version v1.1. It is important to note that the new STAC catalogue does not replace the existing Copernicus Data Space Ecosystem Catalogue but serves as a complementary resource, expanding data discovery options. It includes a limited set of data collections and will be further developed and expanded throughout 2025. Continuous improvements and updates are being focused on refining its performance, enhancing stability, and evolving its capabilities. This will ensure that the new STAC catalogue becomes an increasingly powerful and reliable tool for users, facilitating a more robust and user-friendly access to Copernicus Data Space Ecosystem data and fostering innovation in data exploration.

## Endpoint URL

The new Copernicus Data Space Ecosystem STAC Catalog can be accessed using the following URL:

::: {.panel-tabset}

# HTTPS Request

[`https://stac.dataspace.copernicus.eu/v1/`](https://stac.dataspace.copernicus.eu/v1/){target="_blank"}

:::

## STAC Browser

STAC Browser, which fully complies with the open STAC specification, serves as a comprehensive and searchable catalog of Earth observation and scientific datasets actively maintained and updated by the Copernicus Data Space Ecosystem. It uses standardized JSON API responses to offer an intuitive interface, allowing users to easily navigate and interact with STAC catalogue. 

The latest Copernicus Data Space Ecosystem STAC API Browser can be accessed using the following URL:

::: {.panel-tabset}

# HTTPS Request

[`https://browser.stac.dataspace.copernicus.eu`](https://browser.stac.dataspace.copernicus.eu){target="_blank"}

:::

![Fig 1: STAC Browser Start Screen](_images/STACBrowserStartScreen.png)

The STAC Browser window is divided into two main parts:

1. Copernicus Data Space Ecosystem (CDSE) - STAC API Header: With an interactive navigation bar
2. Main Page: Organized into sections that include a platform description, additional resource links, and a catalog section for browsing datasets.

![Fig 2: STAC Browser Header](_images/STACBrowserHeader.png)

The navigation bar includes several options that facilitate easy exploration and interaction with the STAC Browser:

1. Interactive features:

* Browse: To navigate through available collections
* Search: Redirects to the `/search` endpoint, allowing users to search within the data catalog
* Log in: Redirects to the login page, allowing users to authenticate or register their accounts

2. Links and Information:

* API
* Source
* Share
* Language Selection

3. Logos: Redirects to the [Copernicus Data Space Ecosystem](https://dataspace.copernicus.eu/).

![Fig 3: STAC Browser Main Page](_images/STACBrowserMainPage.png)


The main page is divided into three sections:

1. Description
2. Additional Resources: Links to the OPEN API service documentation and description
3. Catalogs

![Fig 4: STAC Browser Catalogs](_images/STACBrowserCatalog.png)

This section presents the available catalogs (with the number displayed next to the section title), offering options to view them as tiles or a list. Users can sort them in ascending or descending order by collection name. Two sidebars are available: one allows filtering catalogs by title, description, or keywords, and the other provides a list of pre-defined keywords to select from.

After selecting a desired collection, users are redirected to its dedicated STAC Browser page, for example [Sentinel-1 Ground Range Detected (GRD)](https://browser.stac.dataspace.copernicus.eu/collections/sentinel-1-grd?)

![Fig 5: STAC Browser Sentinel-1 GRD Collection](_images/STACBrowserS1GRD.png)

The page is divided into two main sections below the header.

On the left side, there is a collection description along with keywords, license information, and temporal extent. Below this, an interactive map displays the geographical location of the items currently shown on the page, as well as the collection's coverage area. Further down, additional information is presented in the following order: Assets, Providers, and Metadata, which is divided into more detailed sections such as general, SAR, cloud storage, processing, product, satellite, etc. These sections may vary depending on the collection.

On the right side, there is an Items section displaying the currently filtered products. By clicking on a selected product, users can navigate to its dedicated endpoint. Next to the pagination bar, which allows users to browse through product pages, there is a toolbar that enables the display of available filtering options.

![Fig 6: STAC Browser Show Filters Bar](_images/STACBrowserShowFilters.png)

After clicking the **Show Filters** button, a panel expands, allowing the user to define the desired filters.

![Fig 7: STAC Browser Temporal Extent](_images/STACBrowserTemporalExtent.png)

The user can define the desired time range

![Fig 8: STAC Browser Spatial Extent](_images/STACBrowserSpatialExtent.png)

The user can use the interactive map to specify the spatial extent.

![Fig 9: STAC Browser Additional Filters Sentinel-1 GRD](_images/STACBrowserAdditionalFilters.png)

The user can select the filtering type (`AND` or `OR`) and then add the desired filters, which vary depending on the collection. Filters available for another collection - Sentinel-2 Level-2A:

![Fig 10: STAC Browser Additional Filters](_images/STACBrowserAdditionalFiltersS2.png)

![Fig 11: STAC Browser Items Limit](_images/STACBrowserItemLimit.png)

In the final step, the user can set the limit of displayed items per page, with a default value of 12.

![Fig 12: STAC Browser Assets in Items](_images/STACBrowserAssetsInItems.png)

Below the section displaying the Items, there is a section containing information about the Assets in Items.

In the following example, we will apply filtering within the Sentinel-2 Level-2A collection, using a time filter, a spatial filter, and an additional filter. We will select products within the date range from July 1st to August 31st, 2024, define the geospatial extent on the map, and set the cloud cover filter to less than or equal to 10%:

![Fig 13: STAC Browser Filters Example](_images/STACBrowserExample.png)

After clicking the "Submit" button, a list of products matching the selected filters is returned. As mentioned earlier, by clicking on a selected product, the user will be redirected to its dedicated page.

![Fig 14: STAC Browser Filters Result](_images/STACBrowserResults.png)

![Fig 15: STAC Browser Item](_images/STACBrowserItem.png)

The layout of the selected product page is structured in a similar way. On the left side, an interactive map is displayed, showing its geospatial location, with Asset information below it. On the right side, the collection description is provided, including a link that redirects to the Collection. Below that, the dedicated Item metadata is displayed in a separate section.

## Available Collections

Currently, a limited number of collections are available, and these will be expanded over time. In this version of the STAC catalogue, Collections are defined as group of Items that share a set of common fields - properties and metadata. This facilitates data filtering and enables more efficient data management, as individual Items store only the values specific to them.

The following collections from Copernicus Sentinel Mission or Complementary Data are currently available via new STAC API:

* Sentinel-1 Ground Range Detected (GRD)
* Sentinel-2 Global Mosaics
* Sentinel-2 Level-1C
* Sentinel-2 Level-2A

  
## STAC Collections Search

STAC Collections endpoint lets users get information about collections available in the Copernicus Data Space Ecosystem catalogue. 

To access the information about all STAC API Collections:

::: {.panel-tabset}

# HTTPS Request

[`https://stac.dataspace.copernicus.eu/v1/collections`](https://stac.dataspace.copernicus.eu/v1/collections){target="_blank"}

:::


To access the information about a specified STAC API Collection (e.g. SENTINEL-2 Level-2A):

::: {.panel-tabset}

# HTTPS Request

[`https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-l2a`](https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-l2a){target="_blank"}

:::

## Extensions

The extensions are continuously being developed, and the following are currently available:

* `filter`
* `query`
* `fields`
* `sort`
* `free-text search`

### Filter Extension

The Filter Extension provides an expressive mechanism for searching based on Item attributes. It offers more expressiveness compared to the [link query extension] and utilizes the standardized CQL2 query language. Users can apply various operators such as spatial, temporal, and property comparisons. The extension enhances search capabilities by allowing complex queries through GET and POST methods, using both text and JSON formats.

The implementation supports these conformance classes:

* Queryables mechanism along with filter parameters: `filter-lang`, `filter-crs` and `filter`
* BASIC CQL2 which includes logical operators (`AND`, `OR`, `NOT`), comparison operators (`=`, `<>`, `<`, `<=`, `>`, `>=`), and `isNull`. The comparison operators are allowed for string, numeric, boolean, date, and datetime types.
* Item Search Filter applied to the Item Search endpoint `/search`
* Basic spatial operators (`S_INTERSECTS`).

Two CQL2 formats supported by Item Search can be used in the filter parameter:

* CQL2 Text - recommended for GET requests (note that filter-lang defaults to cql2-text in this case)
* CQL2 JSON - recommended and supported for POST requests (note that filter-lang defaults to cql2-json in this case).

#### Queryables

Queryables are terms that can be used in filter expressions to search through a catalog or collection. They are defined globally for the entire catalog and individually for each collection.

Following endpoints have been added to allow users to check for available parameters when writing filter expressions.

To access queryable names for STAC API Item Search filter across the entire catalogue:

::: {.panel-tabset}

# HTTPS Request

[`https://stac.dataspace.copernicus.eu/v1/queryables`](https://stac.dataspace.copernicus.eu/v1/queryables){target="_blank"}

:::

To check acceptable queryable names for currently available collections:

::: {.panel-tabset}

# Sentinel-1 Ground Range Detected (GRD)

[`https://stac.dataspace.copernicus.eu/v1/collections/sentinel-1-grd/queryables`](https://stac.dataspace.copernicus.eu/v1/collections/sentinel-1-grd/queryables){target="_blank"}

# Sentinel-2 Global Mosaics

[`https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-global-mosaics/queryables`](https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-global-mosaics/queryables){target="_blank"}

# Sentinel-2 Level-1C

[`https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-l1c/queryables`](https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-l1c/queryables){target="_blank"}

# Senitnel-2 Level-2A

[`https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-l2a/queryables`](https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-l2a/queryables){target="_blank"}

:::

#### Examples

For POST method requests, the query should be included in the request body and sent to the following endpoint:

[`https://stac.dataspace.copernicus.eu/v1/search`](https://stac.dataspace.copernicus.eu/v1/search){target="_blank"}

::: {.panel-tabset}

To search for items from the Sentinel-2 Level-2A collection with cloud cover of 10 or less, a specified datetime, and that intersect with a given polygon geometry, use a filter query with these conditions.

# GET

[`https://stac.dataspace.copernicus.eu/v1/search?collections=sentinel-2-l2a&filter=eo:cloud_cover <= 10&datetime >= TIMESTAMP('2021-04-08T04:39:23Z')&S_INTERSECTS(geometry, POLYGON((43.5845 -79.5442, 43.6079 -79.4893, 43.5677 -79.4632, 43.6129 -79.3925, 43.6223 -79.3238, 43.6576 -79.3163, 43.7945 -79.1178, 43.8144 -79.1542, 43.8555 -79.1714, 43.7509 -79.6390, 43.5845 -79.5442)))`](https://stac.dataspace.copernicus.eu/v1/search?collections=sentinel-2-l2a&filter=eo:cloud_cover <= 10&datetime >= TIMESTAMP('2021-04-08T04:39:23Z')&S_INTERSECTS(geometry, POLYGON((43.5845 -79.5442, 43.6079 -79.4893, 43.5677 -79.4632, 43.6129 -79.3925, 43.6223 -79.3238, 43.6576 -79.3163, 43.7945 -79.1178, 43.8144 -79.1542, 43.8555 -79.1714, 43.7509 -79.6390, 43.5845 -79.5442))))

# POST

```{json}
{
    "filter": {
        "op": "and",
        "args": [
            {
                "op": "=",
                "args": [
                    {
                        "property": "collection"
                    },
                    "sentinel-2-l2a"
                ]
            },
            {
                "op": "<=",
                "args": [
                    {
                        "property": "eo:cloud_cover"
                    },
                    10
                ]
            },
            {
                "op": ">=",
                "args": [
                    {
                        "property": "datetime"
                    },
                    {
                        "timestamp": "2021-04-08T04:39:23Z"
                    }
                ]
            },
            {
                "op": "s_intersects",
                "args": [
                    {
                        "property": "geometry"
                    },
                    {
                        "type": "Polygon",
                        "coordinates": [
                            [
                                [
                                    43.5845,
                                    -79.5442
                                ],
                                [
                                    43.6079,
                                    -79.4893
                                ],
                                [
                                    43.5677,
                                    -79.4632
                                ],
                                [
                                    43.6129,
                                    -79.3925
                                ],
                                [
                                    43.6223,
                                    -79.3238
                                ],
                                [
                                    43.6576,
                                    -79.3163
                                ],
                                [
                                    43.7945,
                                    -79.1178
                                ],
                                [
                                    43.8144,
                                    -79.1542
                                ],
                                [
                                    43.8555,
                                    -79.1714
                                ],
                                [
                                    43.7509,
                                    -79.6390
                                ],
                                [
                                    43.5845,
                                    -79.5442
                                ]
                            ]
                        ]
                    }
                ]
            }
        ]
    }
}
```

:::

### Query Extension

The Query Extension introduces a query parameter that enables additional filtering based on the properties of Item objects. 

The supported operators include: `eq` (Equal to), `neq` (Not equal to), `lt` (Less than), `lte` (Less than or equal to), `gt` (Greater than), `gte` (Greater than or equal to).

For example, to search for Sentinel-2 Level-2A Items with cloud cover less than 15%, users can use either a GET or a POST request, as shown in the examples below.

For POST method requests, the query should be included in the request body and sent to the following endpoint:

[`https://stac.dataspace.copernicus.eu/v1/search`](https://stac.dataspace.copernicus.eu/v1/search){target="_blank"}

::: {.panel-tabset}

# GET

[`https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-l2a/items?filter-lang=cql2-text&filter=eo:cloud_cover<15`](https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-l2a/items?filter-lang=cql2-text&filter=eo:cloud_cover<15)

# POST

```{json}
{
    "collections": [
        "sentinel-2-l2a"
    ],
    "query": {
        "eo:cloud_cover": {
            "lt": 15
        }
    }
}
```

:::

### Fields Extension

The Fields Extension allows users to request specific fields to be included or excluded from search responses. This helps optimize performance by reducing unnecessary data, especially when dealing with large or complex Item objects. It can be used in both GET and POST requests, with the fields parameter enabling the specification of fields to include or exclude. In GET requests, you can specify fields to exclude by prefixing them with a hyphen (e.g., -geometry). 

For POST method requests, the query should be included in the request body and sent to the following endpoint:

[`https://stac.dataspace.copernicus.eu/v1/search`](https://stac.dataspace.copernicus.eu/v1/search){target="_blank"}

::: {.panel-tabset}

# GET

[`https://stac.dataspace.copernicus.eu/v1/search?collections=sentinel-2-l2a&filter=eo:cloud_cover<15&fields=-geometry`](https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-l2a/items?filter-lang=cql2-text&filter=eo:cloud_cover<15)

# POST

```{json}
{
    "collections": [
        "sentinel-2-l2a"
    ],
    "filter": {
        "op": "lt",
        "args": [
            {
                "property": "eo:cloud_cover"
            },
            15
        ]
    },
    "fields": {
        "exclude": [
            "geometry"
        ]
    }
}
```

:::

### Sort Extension

The Sort Extension allows users to define sorting criteria for search results using the `sortby` parameter. Sorting can be applied to string, numeric, and datetime fields from an Item or its properties. Fields can be sorted in ascending or descending order and are specified as a comma-separated list in GET requests or as an array in POST requests. In GET requests, sorting prefixes may be applied to specify the order of results: `+` denotes ascending order (default), while `-` indicates descending order.

For POST method requests, the query should be included in the request body and sent to the following endpoint:

[`https://stac.dataspace.copernicus.eu/v1/search`](https://stac.dataspace.copernicus.eu/v1/search){target="_blank"}

::: {.panel-tabset}

# GET

[`https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-l2a/items?filter=eo:cloud_cover<15&datetime=2025-01-25T00:00:00.000Z&sortby=+properties.eo:snow_cover`](https://stac.dataspace.copernicus.eu/v1/collections/sentinel-2-l2a/items?filter=eo:cloud_cover<15&sortby=+properties.eo:snow_cover)

# POST

```{json}
{
    "collections": [
        "sentinel-2-l2a"
    ],
    "filter": {
        "op": "and",
        "args": [
            {
                "op": "<",
                "args": [
                    {
                        "property": "eo:cloud_cover"
                    },
                    15
                ]
            },
            {
                "op": "eq",
                "args": [
                    {
                        "property": "datetime"
                    },
                    "2025-01-25T00:00:00.000Z"
                ]
            }
        ]
    },
    "sortby": [
        {
            "field": "properties.eo:snow_cover",
            "direction": "asc"
        }
    ]
}
```

:::

### Free-text Search Extension

The Free-text Search Extension enables users to conduct keyword-based searches on Item properties by utilizing the `q` parameter. This facilitates efficient searching across text fields, including titles, descriptions, and keywords. The extension is not supported for the Item search.

::: {.panel-tabset}

# GET

[`https://stac.dataspace.copernicus.eu/v1/collections?q=grd`](https://stac.dataspace.copernicus.eu/v1/collections?q=grd)

:::

## Jupyter Notebook Examples

In order to provide support to users exploring the extensions offered by the new STAC catalogue, a series of Jupyter Notebooks has been prepared to demonstrate their usage.

::: {#StacExtensions}
:::
